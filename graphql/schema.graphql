scalar Date

type User {
    id: ID!
    username: String!
    email: String
    role: Role!
    phone: String
    school: School!
}

type School {
    id: ID!
    name: String!
    region: Region!
    address: String
    email: String
    phone: String!
    schoolCode: String!
    imageUrl: String
    level: Level!
    students: [Student]
}

type Country {
    id: ID!
    name: String!
}

type Region {
    id: ID!
    name: String!
    country: Country
}

type Classroom {
    id: ID!
    name: String!
    level: String!
    school: School!
    students: [Student]
    subjects: [Subject]
}

type Student {
    id: ID!
    name: String!
    admNo: String!
    domitory: String
    class: Classroom
    feeBalance: String
    subjects: [Subject]
    school: School!
}

type Subject {
    id: ID!
    name: String!
    assignee: User
    class: Classroom!
}

type GeneralResponse {
    message: String
    error: Error
}

type SchoolResponse {
    payload: School
    error: Error
}

type ClassroomResponse {
    payload: Classroom
    error: Error
}

type AuthPayload {
    token: String
    user: User
}

type Error {
    message: String!
    field: String!
}

type AuthResponse {
    payload: AuthPayload
    error: Error
}

input SignUpInput {
    username: String!
    email: String
    phone: String
    role: Role
    school: SchoolCreateOneInput!
    password: String!
}

input LoginInput {
    email: String
    phone: String
    password: String!
}

input RegionQueryInput {
    id: String!
}
input SchoolCreateInput {
    name: String!
    region: RegionCreateOneInput!
    address: String
    email: String
    phone: String!
    schoolCode: String!
    imageUrl: String
    level: Level
}

input RegionCreateOneInput {
    connect: RegionWhereUniqueInput
}

input SchoolCreateOneInput {
    connect: SchoolWhereUniqueInput
}

input RegionWhereUniqueInput {
    id: ID
}

input RegionUpdateOneInput {
    connect: RegionWhereUniqueInput
}

input SchoolWhereUniqueInput {
    schoolCode: String
}

input SchoolUpdateInput {
    name: String
    region: RegionUpdateOneInput
    address: String
    email: String
    phone: String
    schoolCode: String
    imageUrl: String
    level: Level
}

input SchoolUpdateOneInput {
    connect: SchoolWhereUniqueInput
}

input UserWhereUniqueInput {
    id: ID
}

input UserUpdateInput {
    username: String
    email: String
    school: SchoolUpdateOneInput
    phone: String
    password: String
    role: Role
}

input CountryCreateInput {
    name: String!
}

input CountryUpdateInput {
    name: String
}

input CountryWhereUniqueInput {
    id: ID
}

input RegionCreateInput {
    name: String!
    country: CountryCreateOneInput!
}

input CountryCreateOneInput {
    connect: CountryWhereUniqueInput
}

input RegionUpdateInput {
    name: String
    country: CountryUpdateOneInput
}

input CountryUpdateOneInput {
    connect: CountryWhereUniqueInput
}

input ClassroomCreateInput {
    name: String!
    level: String!
    school: SchoolCreateOneInput
}

input ClassroomUpdateInput {
    name: String
    level: String
    students: StudentUpdateManyWithoutClassInput
    subjects: SubjectUpdateManyWithoutClassInput
}

input StudentUpdateManyWithoutClassInput {
    connect: [StudentWhereUniqueInput!]
}

input SubjectUpdateManyWithoutClassInput {
    connect: [SubjectWhereUniqueInput!]
}

input StudentWhereUniqueInput {
    id: ID
}

input SubjectWhereUniqueInput {
    id: ID
}

input ClassroomWhereUniqueInput {
    id: ID
}

enum Role {
    SUDO
    ADMIN
    TEACHER
    PARENT
    ACCOUNTANT
    STOREMAN
    USER
}

enum Level {
    PRESCHOOL
    PRIMARY
    HIGHSCHOOL
    GENERAL
}
