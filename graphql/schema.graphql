scalar Date

type User {
    id: ID!
    firstName: String!
    middleName: String
    lastName: String!
    email: String
    role: Role!
    department: [Department]
    phone: String
    school: School!
    gender: Gender
}

type School {
    id: ID!
    name: String!
    region: Region!
    address: String
    email: String
    phone: String!
    schoolCode: String!
    imageUrl: String
    level: Level
    students: [Student]
    classes: [Classroom]
    classLevels: [ClassLevel]
    subjects: [Subject]
}

type Country {
    id: ID!
    name: String!
}

type Region {
    id: ID!
    name: String!
    country: Country
}

type Classroom {
    id: ID!
    name: String!
    level: ClassLevel!
    school: School!
    classTeacher: User
    capacity: String!
    students: [Student]
    subjects: [ClassSubject]
}

type ClassroomRes {
    id: ID!
    name: String!
    level: ClassLevel!
    classTeacher: User
    capacity: String!
    students: [Student]
    subjects: [ClassSubject]
}

type SingleClassroomResponse {
    id: ID!
    name: String!
    level: ClassLevel!
    classTeacher: User
    capacity: String!
    students: [Student]
    subjects: [ClassSubject]
    totalStudents: Int!
}

type Student {
    id: ID!
    firstName: String!
    middleName: String
    lastName: String!
    admNo: String!
    domitory: String
    class: Classroom
    feeBalance: String
    subjects: [ClassSubject]
    school: School!
    gender: Gender
    prefect: Prefect
}

type StudentRes {
    id: ID!
    firstName: String!
    middleName: String
    lastName: String!
    admNo: String!
    domitory: String
    class: Classroom
    feeBalance: String
    subjects: [ClassSubject]
    gender: Gender
    prefect: Prefect
}

type Subject {
    id: ID!
    name: String!
    school: School!
    subjectCode: String
    subjectAbv: String
    department: Department
    status: SubjectStatus
}

type Department {
    id: ID!
    name: String!
    hod: User
    school: School!
}

type ClassLevel {
    id: ID!
    levelName: String!
    description: String
    classRooms: [Classroom]
    school: School!
}

type ClassLevelRes {
    id: ID!
    levelName: String!
    description: String
    totalClassRooms: Int!
    totalStudents: Int!
    classRooms: [SingleClassroomResponse]
}

type ClassSubject {
    id: ID!
    subject: Subject!
    assignee: User
    class: Classroom!
}

type AddClassLevelRes {
    id: ID!
    levelName: String!
    description: String
}

type AddClassLevelResponse {
    payload: AddClassLevelRes
    error: Error
}

type GeneralResponse {
    message: String
    error: Error
}

type SchoolResponse {
    payload: School
    error: Error
}

type SchoolDetailsResponse {
    school: School
    totalStudents: Int
}

type ClassroomResponse {
    payload: ClassroomRes
    error: Error
}

type SubjectResponse {
    payload: Subject
    error: Error
}

type ClassSubjectResponse {
    payload: ClassSubject
    error: Error
}

type ClassLevelResponse {
    payload: [ClassLevelRes]
    error: Error
}

type StudentResponse {
    payload: StudentRes
    error: Error
}

type AuthPayload {
    token: String
    user: User
}

type Error {
    message: String!
    field: String!
}

type AuthResponse {
    payload: AuthPayload
    error: Error
}

input SignUpInput {
    firstName: String!
    middleName: String
    lastName: String!
    email: String
    school: SchoolCreateOneInput
    phone: String
    password: String!
    gender: Gender
    role: Role
    department: DepartmentCreateManyWithoutHodInput
}

input LoginInput {
    email: String
    phone: String
    password: String!
}

input GlobalQueryInput {
    id: String!
}
input SchoolCreateInput {
    name: String!
    region: RegionCreateOneInput!
    address: String
    email: String
    phone: String!
    schoolCode: String!
    imageUrl: String
    level: Level
}

input RegionCreateOneInput {
    connect: RegionWhereUniqueInput
}

input SchoolCreateOneInput {
    connect: SchoolWhereUniqueInput
}

input RegionWhereUniqueInput {
    id: ID
}

input DepartmentCreateManyWithoutHodInput {
    connect: [DepartmentWhereUniqueInput!]
}

input DepartmentWhereUniqueInput {
    id: ID
}

input RegionUpdateOneInput {
    connect: RegionWhereUniqueInput
}

input SchoolWhereUniqueInput {
    id: ID
}

input SchoolUpdateInput {
    name: String
    region: RegionUpdateOneInput
    address: String
    email: String
    phone: String
    schoolCode: String
    imageUrl: String
    level: Level
}

input SchoolUpdateOneInput {
    connect: SchoolWhereUniqueInput
}

input UserWhereUniqueInput {
    id: ID
}

input UserUpdateInput {
    firstName: String
    middleName: String
    lastName: String
    email: String
    phone: String
    gender: Gender
    role: Role
    department: DepartmentUpdateManyWithoutHodInput
}

input DepartmentUpdateManyWithoutHodInput {
    connect: [DepartmentWhereUniqueInput!]
}

input CountryCreateInput {
    name: String!
}

input CountryUpdateInput {
    name: String
}

input CountryWhereUniqueInput {
    id: ID
}

input ClassLevelWhereUniqueInput {
    id: ID
}

input RegionCreateInput {
    name: String!
    country: CountryCreateOneInput!
}

input CountryCreateOneInput {
    connect: CountryWhereUniqueInput
}

input RegionUpdateInput {
    name: String
    country: CountryUpdateOneInput
}

input CountryUpdateOneInput {
    connect: CountryWhereUniqueInput
}

input ClassLevelCreateOneInput {
    connect: ClassLevelWhereUniqueInput
}

input ClassLevelCreateOneWithoutClassRoomsInput {
    connect: ClassLevelWhereUniqueInput
}

input ClassroomCreateInput {
    name: String!
    level: ClassLevelCreateOneWithoutClassRoomsInput!
    capacity: String!
    classTeacher: UserCreateOneInput
}

input ClassroomUpdateInput {
    name: String
    level: ClassLevelUpdateOneRequiredWithoutClassRoomsInput
    capacity: String
    classTeacher: UserUpdateOneInput
    students: StudentUpdateManyWithoutClassInput
    subjects: ClassSubjectUpdateManyWithoutClassInput
}

input StudentUpdateManyWithoutClassInput {
    connect: [StudentWhereUniqueInput!]
}

input SubjectUpdateManyWithoutClassInput {
    connect: [SubjectWhereUniqueInput!]
}

input StudentWhereUniqueInput {
    id: ID
}

input SubjectWhereUniqueInput {
    id: ID
}

input ClassroomWhereUniqueInput {
    id: ID
}

input ClassLevelUpdateOneRequiredWithoutClassRoomsInput {
    connect: ClassLevelWhereUniqueInput
}

input ClassSubjectUpdateManyWithoutClassInput {
    connect: [ClassSubjectWhereUniqueInput!]
}

input ClassSubjectWhereUniqueInput {
    id: ID
}

input UserCreateOneInput {
    connect: UserWhereUniqueInput
}

input ClassroomCreateOneWithoutSubjectsInput {
    connect: ClassroomWhereUniqueInput
}

input SubjectCreateInput {
    id: ID
    name: String!
    subjectCode: String
    subjectAbv: String
    department: DepartmentCreateOneInput
    status: SubjectStatus
    school: SchoolCreateOneWithoutSubjectsInput!
}

input SchoolCreateOneWithoutSubjectsInput {
    connect: SchoolWhereUniqueInput
}

input DepartmentCreateOneInput {
    connect: DepartmentWhereUniqueInput
}
input ClassLevelCreateInput {
    levelName: String!
    description: String
    school: SchoolCreateOneInput
}

input UserUpdateOneInput {
    connect: UserWhereUniqueInput
}

input ClassroomUpdateOneRequiredWithoutSubjectsInput {
    connect: ClassroomWhereUniqueInput
}

input SubjectUpdateInput {
    name: String
    subjectCode: String
    subjectAbv: String
    department: DepartmentUpdateOneInput
    status: SubjectStatus
}

input DepartmentUpdateOneInput {
    connect: DepartmentWhereUniqueInput
}
input ClassroomCreateOneWithoutStudentsInput {
    connect: ClassroomWhereUniqueInput
}

input SchoolCreateOneWithoutStudentsInput {
    connect: SchoolWhereUniqueInput
}

input StudentCreateInput {
    firstName: String!
    middleName: String
    lastName: String!
    admNo: String!
    domitory: String
    class: ClassroomCreateOneWithoutStudentsInput
    gender: Gender
    prefect: Prefect
}

input ClassSubjectUpdateManyInput {
    connect: [ClassSubjectWhereUniqueInput!]
}

input ClassroomUpdateOneWithoutStudentsInput {
    connect: ClassroomWhereUniqueInput
}

input StudentUpdateInput {
    firstName: String
    middleName: String
    lastName: String
    admNo: String
    domitory: String
    class: ClassroomUpdateOneWithoutStudentsInput
    feeBalance: String
    subjects: ClassSubjectUpdateManyInput
    gender: Gender
    prefect: Prefect
}
input SubjectCreateOneInput {
    connect: SubjectWhereUniqueInput
}
input ClassSubjectCreateInput {
    subject: SubjectCreateOneInput!
    assignee: UserCreateOneInput
    class: ClassroomCreateOneWithoutSubjectsInput!
}

input SubjectUpdateOneRequiredInput {
    connect: SubjectWhereUniqueInput
}

input ClassSubjectUpdateInput {
    subject: SubjectUpdateOneRequiredInput
    assignee: UserUpdateOneInput
    class: ClassroomUpdateOneRequiredWithoutSubjectsInput
}

enum Role {
    SUDO
    ADMIN
    TEACHER
    PARENT
    ACCOUNTANT
    STOREMAN
    USER
}

enum Level {
    PRESCHOOL
    PRIMARY
    HIGHSCHOOL
    GENERAL
}

enum Prefect {
    PREFECT
    ASSISTANT
    NORMAL
}

enum Gender {
    MALE
    FEMALE
    NA
}

enum SubjectStatus {
    OPTIONAL
    COMPULSORY
}
