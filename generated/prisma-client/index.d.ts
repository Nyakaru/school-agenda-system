// Code generated by Prisma (prisma@1.34.12). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  classLevel: (where?: ClassLevelWhereInput) => Promise<boolean>;
  classSubject: (where?: ClassSubjectWhereInput) => Promise<boolean>;
  classroom: (where?: ClassroomWhereInput) => Promise<boolean>;
  country: (where?: CountryWhereInput) => Promise<boolean>;
  region: (where?: RegionWhereInput) => Promise<boolean>;
  school: (where?: SchoolWhereInput) => Promise<boolean>;
  student: (where?: StudentWhereInput) => Promise<boolean>;
  subject: (where?: SubjectWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  classLevel: (where: ClassLevelWhereUniqueInput) => ClassLevelNullablePromise;
  classLevels: (args?: {
    where?: ClassLevelWhereInput;
    orderBy?: ClassLevelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ClassLevel>;
  classLevelsConnection: (args?: {
    where?: ClassLevelWhereInput;
    orderBy?: ClassLevelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ClassLevelConnectionPromise;
  classSubject: (
    where: ClassSubjectWhereUniqueInput
  ) => ClassSubjectNullablePromise;
  classSubjects: (args?: {
    where?: ClassSubjectWhereInput;
    orderBy?: ClassSubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ClassSubject>;
  classSubjectsConnection: (args?: {
    where?: ClassSubjectWhereInput;
    orderBy?: ClassSubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ClassSubjectConnectionPromise;
  classroom: (where: ClassroomWhereUniqueInput) => ClassroomNullablePromise;
  classrooms: (args?: {
    where?: ClassroomWhereInput;
    orderBy?: ClassroomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Classroom>;
  classroomsConnection: (args?: {
    where?: ClassroomWhereInput;
    orderBy?: ClassroomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ClassroomConnectionPromise;
  country: (where: CountryWhereUniqueInput) => CountryNullablePromise;
  countries: (args?: {
    where?: CountryWhereInput;
    orderBy?: CountryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Country>;
  countriesConnection: (args?: {
    where?: CountryWhereInput;
    orderBy?: CountryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CountryConnectionPromise;
  region: (where: RegionWhereUniqueInput) => RegionNullablePromise;
  regions: (args?: {
    where?: RegionWhereInput;
    orderBy?: RegionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Region>;
  regionsConnection: (args?: {
    where?: RegionWhereInput;
    orderBy?: RegionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RegionConnectionPromise;
  school: (where: SchoolWhereUniqueInput) => SchoolNullablePromise;
  schools: (args?: {
    where?: SchoolWhereInput;
    orderBy?: SchoolOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<School>;
  schoolsConnection: (args?: {
    where?: SchoolWhereInput;
    orderBy?: SchoolOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SchoolConnectionPromise;
  student: (where: StudentWhereUniqueInput) => StudentNullablePromise;
  students: (args?: {
    where?: StudentWhereInput;
    orderBy?: StudentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Student>;
  studentsConnection: (args?: {
    where?: StudentWhereInput;
    orderBy?: StudentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => StudentConnectionPromise;
  subject: (where: SubjectWhereUniqueInput) => SubjectNullablePromise;
  subjects: (args?: {
    where?: SubjectWhereInput;
    orderBy?: SubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Subject>;
  subjectsConnection: (args?: {
    where?: SubjectWhereInput;
    orderBy?: SubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SubjectConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createClassLevel: (data: ClassLevelCreateInput) => ClassLevelPromise;
  updateClassLevel: (args: {
    data: ClassLevelUpdateInput;
    where: ClassLevelWhereUniqueInput;
  }) => ClassLevelPromise;
  updateManyClassLevels: (args: {
    data: ClassLevelUpdateManyMutationInput;
    where?: ClassLevelWhereInput;
  }) => BatchPayloadPromise;
  upsertClassLevel: (args: {
    where: ClassLevelWhereUniqueInput;
    create: ClassLevelCreateInput;
    update: ClassLevelUpdateInput;
  }) => ClassLevelPromise;
  deleteClassLevel: (where: ClassLevelWhereUniqueInput) => ClassLevelPromise;
  deleteManyClassLevels: (where?: ClassLevelWhereInput) => BatchPayloadPromise;
  createClassSubject: (data: ClassSubjectCreateInput) => ClassSubjectPromise;
  updateClassSubject: (args: {
    data: ClassSubjectUpdateInput;
    where: ClassSubjectWhereUniqueInput;
  }) => ClassSubjectPromise;
  upsertClassSubject: (args: {
    where: ClassSubjectWhereUniqueInput;
    create: ClassSubjectCreateInput;
    update: ClassSubjectUpdateInput;
  }) => ClassSubjectPromise;
  deleteClassSubject: (
    where: ClassSubjectWhereUniqueInput
  ) => ClassSubjectPromise;
  deleteManyClassSubjects: (
    where?: ClassSubjectWhereInput
  ) => BatchPayloadPromise;
  createClassroom: (data: ClassroomCreateInput) => ClassroomPromise;
  updateClassroom: (args: {
    data: ClassroomUpdateInput;
    where: ClassroomWhereUniqueInput;
  }) => ClassroomPromise;
  updateManyClassrooms: (args: {
    data: ClassroomUpdateManyMutationInput;
    where?: ClassroomWhereInput;
  }) => BatchPayloadPromise;
  upsertClassroom: (args: {
    where: ClassroomWhereUniqueInput;
    create: ClassroomCreateInput;
    update: ClassroomUpdateInput;
  }) => ClassroomPromise;
  deleteClassroom: (where: ClassroomWhereUniqueInput) => ClassroomPromise;
  deleteManyClassrooms: (where?: ClassroomWhereInput) => BatchPayloadPromise;
  createCountry: (data: CountryCreateInput) => CountryPromise;
  updateCountry: (args: {
    data: CountryUpdateInput;
    where: CountryWhereUniqueInput;
  }) => CountryPromise;
  updateManyCountries: (args: {
    data: CountryUpdateManyMutationInput;
    where?: CountryWhereInput;
  }) => BatchPayloadPromise;
  upsertCountry: (args: {
    where: CountryWhereUniqueInput;
    create: CountryCreateInput;
    update: CountryUpdateInput;
  }) => CountryPromise;
  deleteCountry: (where: CountryWhereUniqueInput) => CountryPromise;
  deleteManyCountries: (where?: CountryWhereInput) => BatchPayloadPromise;
  createRegion: (data: RegionCreateInput) => RegionPromise;
  updateRegion: (args: {
    data: RegionUpdateInput;
    where: RegionWhereUniqueInput;
  }) => RegionPromise;
  updateManyRegions: (args: {
    data: RegionUpdateManyMutationInput;
    where?: RegionWhereInput;
  }) => BatchPayloadPromise;
  upsertRegion: (args: {
    where: RegionWhereUniqueInput;
    create: RegionCreateInput;
    update: RegionUpdateInput;
  }) => RegionPromise;
  deleteRegion: (where: RegionWhereUniqueInput) => RegionPromise;
  deleteManyRegions: (where?: RegionWhereInput) => BatchPayloadPromise;
  createSchool: (data: SchoolCreateInput) => SchoolPromise;
  updateSchool: (args: {
    data: SchoolUpdateInput;
    where: SchoolWhereUniqueInput;
  }) => SchoolPromise;
  updateManySchools: (args: {
    data: SchoolUpdateManyMutationInput;
    where?: SchoolWhereInput;
  }) => BatchPayloadPromise;
  upsertSchool: (args: {
    where: SchoolWhereUniqueInput;
    create: SchoolCreateInput;
    update: SchoolUpdateInput;
  }) => SchoolPromise;
  deleteSchool: (where: SchoolWhereUniqueInput) => SchoolPromise;
  deleteManySchools: (where?: SchoolWhereInput) => BatchPayloadPromise;
  createStudent: (data: StudentCreateInput) => StudentPromise;
  updateStudent: (args: {
    data: StudentUpdateInput;
    where: StudentWhereUniqueInput;
  }) => StudentPromise;
  updateManyStudents: (args: {
    data: StudentUpdateManyMutationInput;
    where?: StudentWhereInput;
  }) => BatchPayloadPromise;
  upsertStudent: (args: {
    where: StudentWhereUniqueInput;
    create: StudentCreateInput;
    update: StudentUpdateInput;
  }) => StudentPromise;
  deleteStudent: (where: StudentWhereUniqueInput) => StudentPromise;
  deleteManyStudents: (where?: StudentWhereInput) => BatchPayloadPromise;
  createSubject: (data: SubjectCreateInput) => SubjectPromise;
  updateSubject: (args: {
    data: SubjectUpdateInput;
    where: SubjectWhereUniqueInput;
  }) => SubjectPromise;
  updateManySubjects: (args: {
    data: SubjectUpdateManyMutationInput;
    where?: SubjectWhereInput;
  }) => BatchPayloadPromise;
  upsertSubject: (args: {
    where: SubjectWhereUniqueInput;
    create: SubjectCreateInput;
    update: SubjectUpdateInput;
  }) => SubjectPromise;
  deleteSubject: (where: SubjectWhereUniqueInput) => SubjectPromise;
  deleteManySubjects: (where?: SubjectWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  classLevel: (
    where?: ClassLevelSubscriptionWhereInput
  ) => ClassLevelSubscriptionPayloadSubscription;
  classSubject: (
    where?: ClassSubjectSubscriptionWhereInput
  ) => ClassSubjectSubscriptionPayloadSubscription;
  classroom: (
    where?: ClassroomSubscriptionWhereInput
  ) => ClassroomSubscriptionPayloadSubscription;
  country: (
    where?: CountrySubscriptionWhereInput
  ) => CountrySubscriptionPayloadSubscription;
  region: (
    where?: RegionSubscriptionWhereInput
  ) => RegionSubscriptionPayloadSubscription;
  school: (
    where?: SchoolSubscriptionWhereInput
  ) => SchoolSubscriptionPayloadSubscription;
  student: (
    where?: StudentSubscriptionWhereInput
  ) => StudentSubscriptionPayloadSubscription;
  subject: (
    where?: SubjectSubscriptionWhereInput
  ) => SubjectSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Level = "PRESCHOOL" | "PRIMARY" | "HIGHSCHOOL" | "GENERAL";

export type Gender = "MALE" | "FEMALE" | "NA";

export type Role =
  | "SUDO"
  | "ADMIN"
  | "TEACHER"
  | "PARENT"
  | "ACCOUNTANT"
  | "STOREMAN"
  | "USER";

export type Prefect = "PREFECT" | "ASSISTANT" | "NORMAL";

export type ClassroomOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "capacity_ASC"
  | "capacity_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type StudentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "middleName_ASC"
  | "middleName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "admNo_ASC"
  | "admNo_DESC"
  | "domitory_ASC"
  | "domitory_DESC"
  | "feeBalance_ASC"
  | "feeBalance_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "prefect_ASC"
  | "prefect_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ClassSubjectOrderByInput = "id_ASC" | "id_DESC";

export type SubjectOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ClassLevelOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "levelName_ASC"
  | "levelName_DESC"
  | "description_ASC"
  | "description_DESC";

export type CountryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type RegionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SchoolOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "address_ASC"
  | "address_DESC"
  | "email_ASC"
  | "email_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "schoolCode_ASC"
  | "schoolCode_DESC"
  | "imageUrl_ASC"
  | "imageUrl_DESC"
  | "level_ASC"
  | "level_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "middleName_ASC"
  | "middleName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "email_ASC"
  | "email_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "password_ASC"
  | "password_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "role_ASC"
  | "role_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ClassLevelWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  levelName?: Maybe<String>;
}>;

export interface ClassroomWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  level?: Maybe<ClassLevelWhereInput>;
  school?: Maybe<SchoolWhereInput>;
  capacity?: Maybe<String>;
  capacity_not?: Maybe<String>;
  capacity_in?: Maybe<String[] | String>;
  capacity_not_in?: Maybe<String[] | String>;
  capacity_lt?: Maybe<String>;
  capacity_lte?: Maybe<String>;
  capacity_gt?: Maybe<String>;
  capacity_gte?: Maybe<String>;
  capacity_contains?: Maybe<String>;
  capacity_not_contains?: Maybe<String>;
  capacity_starts_with?: Maybe<String>;
  capacity_not_starts_with?: Maybe<String>;
  capacity_ends_with?: Maybe<String>;
  capacity_not_ends_with?: Maybe<String>;
  classTeacher?: Maybe<UserWhereInput>;
  students_every?: Maybe<StudentWhereInput>;
  students_some?: Maybe<StudentWhereInput>;
  students_none?: Maybe<StudentWhereInput>;
  subjects_every?: Maybe<ClassSubjectWhereInput>;
  subjects_some?: Maybe<ClassSubjectWhereInput>;
  subjects_none?: Maybe<ClassSubjectWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ClassroomWhereInput[] | ClassroomWhereInput>;
  OR?: Maybe<ClassroomWhereInput[] | ClassroomWhereInput>;
  NOT?: Maybe<ClassroomWhereInput[] | ClassroomWhereInput>;
}

export interface ClassLevelWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  levelName?: Maybe<String>;
  levelName_not?: Maybe<String>;
  levelName_in?: Maybe<String[] | String>;
  levelName_not_in?: Maybe<String[] | String>;
  levelName_lt?: Maybe<String>;
  levelName_lte?: Maybe<String>;
  levelName_gt?: Maybe<String>;
  levelName_gte?: Maybe<String>;
  levelName_contains?: Maybe<String>;
  levelName_not_contains?: Maybe<String>;
  levelName_starts_with?: Maybe<String>;
  levelName_not_starts_with?: Maybe<String>;
  levelName_ends_with?: Maybe<String>;
  levelName_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  school?: Maybe<SchoolWhereInput>;
  classRooms_every?: Maybe<ClassroomWhereInput>;
  classRooms_some?: Maybe<ClassroomWhereInput>;
  classRooms_none?: Maybe<ClassroomWhereInput>;
  AND?: Maybe<ClassLevelWhereInput[] | ClassLevelWhereInput>;
  OR?: Maybe<ClassLevelWhereInput[] | ClassLevelWhereInput>;
  NOT?: Maybe<ClassLevelWhereInput[] | ClassLevelWhereInput>;
}

export interface SchoolWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  region?: Maybe<RegionWhereInput>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  schoolCode?: Maybe<String>;
  schoolCode_not?: Maybe<String>;
  schoolCode_in?: Maybe<String[] | String>;
  schoolCode_not_in?: Maybe<String[] | String>;
  schoolCode_lt?: Maybe<String>;
  schoolCode_lte?: Maybe<String>;
  schoolCode_gt?: Maybe<String>;
  schoolCode_gte?: Maybe<String>;
  schoolCode_contains?: Maybe<String>;
  schoolCode_not_contains?: Maybe<String>;
  schoolCode_starts_with?: Maybe<String>;
  schoolCode_not_starts_with?: Maybe<String>;
  schoolCode_ends_with?: Maybe<String>;
  schoolCode_not_ends_with?: Maybe<String>;
  classes_every?: Maybe<ClassroomWhereInput>;
  classes_some?: Maybe<ClassroomWhereInput>;
  classes_none?: Maybe<ClassroomWhereInput>;
  subjects_every?: Maybe<SubjectWhereInput>;
  subjects_some?: Maybe<SubjectWhereInput>;
  subjects_none?: Maybe<SubjectWhereInput>;
  imageUrl?: Maybe<String>;
  imageUrl_not?: Maybe<String>;
  imageUrl_in?: Maybe<String[] | String>;
  imageUrl_not_in?: Maybe<String[] | String>;
  imageUrl_lt?: Maybe<String>;
  imageUrl_lte?: Maybe<String>;
  imageUrl_gt?: Maybe<String>;
  imageUrl_gte?: Maybe<String>;
  imageUrl_contains?: Maybe<String>;
  imageUrl_not_contains?: Maybe<String>;
  imageUrl_starts_with?: Maybe<String>;
  imageUrl_not_starts_with?: Maybe<String>;
  imageUrl_ends_with?: Maybe<String>;
  imageUrl_not_ends_with?: Maybe<String>;
  level?: Maybe<Level>;
  level_not?: Maybe<Level>;
  level_in?: Maybe<Level[] | Level>;
  level_not_in?: Maybe<Level[] | Level>;
  students_every?: Maybe<StudentWhereInput>;
  students_some?: Maybe<StudentWhereInput>;
  students_none?: Maybe<StudentWhereInput>;
  classLevels_every?: Maybe<ClassLevelWhereInput>;
  classLevels_some?: Maybe<ClassLevelWhereInput>;
  classLevels_none?: Maybe<ClassLevelWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SchoolWhereInput[] | SchoolWhereInput>;
  OR?: Maybe<SchoolWhereInput[] | SchoolWhereInput>;
  NOT?: Maybe<SchoolWhereInput[] | SchoolWhereInput>;
}

export interface RegionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  country?: Maybe<CountryWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<RegionWhereInput[] | RegionWhereInput>;
  OR?: Maybe<RegionWhereInput[] | RegionWhereInput>;
  NOT?: Maybe<RegionWhereInput[] | RegionWhereInput>;
}

export interface CountryWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CountryWhereInput[] | CountryWhereInput>;
  OR?: Maybe<CountryWhereInput[] | CountryWhereInput>;
  NOT?: Maybe<CountryWhereInput[] | CountryWhereInput>;
}

export interface SubjectWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  school?: Maybe<SchoolWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SubjectWhereInput[] | SubjectWhereInput>;
  OR?: Maybe<SubjectWhereInput[] | SubjectWhereInput>;
  NOT?: Maybe<SubjectWhereInput[] | SubjectWhereInput>;
}

export interface StudentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  middleName?: Maybe<String>;
  middleName_not?: Maybe<String>;
  middleName_in?: Maybe<String[] | String>;
  middleName_not_in?: Maybe<String[] | String>;
  middleName_lt?: Maybe<String>;
  middleName_lte?: Maybe<String>;
  middleName_gt?: Maybe<String>;
  middleName_gte?: Maybe<String>;
  middleName_contains?: Maybe<String>;
  middleName_not_contains?: Maybe<String>;
  middleName_starts_with?: Maybe<String>;
  middleName_not_starts_with?: Maybe<String>;
  middleName_ends_with?: Maybe<String>;
  middleName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  admNo?: Maybe<String>;
  admNo_not?: Maybe<String>;
  admNo_in?: Maybe<String[] | String>;
  admNo_not_in?: Maybe<String[] | String>;
  admNo_lt?: Maybe<String>;
  admNo_lte?: Maybe<String>;
  admNo_gt?: Maybe<String>;
  admNo_gte?: Maybe<String>;
  admNo_contains?: Maybe<String>;
  admNo_not_contains?: Maybe<String>;
  admNo_starts_with?: Maybe<String>;
  admNo_not_starts_with?: Maybe<String>;
  admNo_ends_with?: Maybe<String>;
  admNo_not_ends_with?: Maybe<String>;
  domitory?: Maybe<String>;
  domitory_not?: Maybe<String>;
  domitory_in?: Maybe<String[] | String>;
  domitory_not_in?: Maybe<String[] | String>;
  domitory_lt?: Maybe<String>;
  domitory_lte?: Maybe<String>;
  domitory_gt?: Maybe<String>;
  domitory_gte?: Maybe<String>;
  domitory_contains?: Maybe<String>;
  domitory_not_contains?: Maybe<String>;
  domitory_starts_with?: Maybe<String>;
  domitory_not_starts_with?: Maybe<String>;
  domitory_ends_with?: Maybe<String>;
  domitory_not_ends_with?: Maybe<String>;
  class?: Maybe<ClassroomWhereInput>;
  feeBalance?: Maybe<String>;
  feeBalance_not?: Maybe<String>;
  feeBalance_in?: Maybe<String[] | String>;
  feeBalance_not_in?: Maybe<String[] | String>;
  feeBalance_lt?: Maybe<String>;
  feeBalance_lte?: Maybe<String>;
  feeBalance_gt?: Maybe<String>;
  feeBalance_gte?: Maybe<String>;
  feeBalance_contains?: Maybe<String>;
  feeBalance_not_contains?: Maybe<String>;
  feeBalance_starts_with?: Maybe<String>;
  feeBalance_not_starts_with?: Maybe<String>;
  feeBalance_ends_with?: Maybe<String>;
  feeBalance_not_ends_with?: Maybe<String>;
  subjects_every?: Maybe<ClassSubjectWhereInput>;
  subjects_some?: Maybe<ClassSubjectWhereInput>;
  subjects_none?: Maybe<ClassSubjectWhereInput>;
  gender?: Maybe<Gender>;
  gender_not?: Maybe<Gender>;
  gender_in?: Maybe<Gender[] | Gender>;
  gender_not_in?: Maybe<Gender[] | Gender>;
  school?: Maybe<SchoolWhereInput>;
  prefect?: Maybe<Prefect>;
  prefect_not?: Maybe<Prefect>;
  prefect_in?: Maybe<Prefect[] | Prefect>;
  prefect_not_in?: Maybe<Prefect[] | Prefect>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<StudentWhereInput[] | StudentWhereInput>;
  OR?: Maybe<StudentWhereInput[] | StudentWhereInput>;
  NOT?: Maybe<StudentWhereInput[] | StudentWhereInput>;
}

export interface ClassSubjectWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  subject?: Maybe<SubjectWhereInput>;
  assignee?: Maybe<UserWhereInput>;
  class?: Maybe<ClassroomWhereInput>;
  AND?: Maybe<ClassSubjectWhereInput[] | ClassSubjectWhereInput>;
  OR?: Maybe<ClassSubjectWhereInput[] | ClassSubjectWhereInput>;
  NOT?: Maybe<ClassSubjectWhereInput[] | ClassSubjectWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  middleName?: Maybe<String>;
  middleName_not?: Maybe<String>;
  middleName_in?: Maybe<String[] | String>;
  middleName_not_in?: Maybe<String[] | String>;
  middleName_lt?: Maybe<String>;
  middleName_lte?: Maybe<String>;
  middleName_gt?: Maybe<String>;
  middleName_gte?: Maybe<String>;
  middleName_contains?: Maybe<String>;
  middleName_not_contains?: Maybe<String>;
  middleName_starts_with?: Maybe<String>;
  middleName_not_starts_with?: Maybe<String>;
  middleName_ends_with?: Maybe<String>;
  middleName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  school?: Maybe<SchoolWhereInput>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  gender?: Maybe<Gender>;
  gender_not?: Maybe<Gender>;
  gender_in?: Maybe<Gender[] | Gender>;
  gender_not_in?: Maybe<Gender[] | Gender>;
  role?: Maybe<Role>;
  role_not?: Maybe<Role>;
  role_in?: Maybe<Role[] | Role>;
  role_not_in?: Maybe<Role[] | Role>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export type ClassSubjectWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ClassroomWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export type CountryWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type RegionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type SchoolWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  phone?: Maybe<String>;
  schoolCode?: Maybe<String>;
}>;

export type StudentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  admNo?: Maybe<String>;
}>;

export type SubjectWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
}>;

export interface ClassLevelCreateInput {
  id?: Maybe<ID_Input>;
  levelName: String;
  description?: Maybe<String>;
  school?: Maybe<SchoolCreateOneWithoutClassLevelsInput>;
  classRooms?: Maybe<ClassroomCreateManyWithoutLevelInput>;
}

export interface SchoolCreateOneWithoutClassLevelsInput {
  create?: Maybe<SchoolCreateWithoutClassLevelsInput>;
  connect?: Maybe<SchoolWhereUniqueInput>;
}

export interface SchoolCreateWithoutClassLevelsInput {
  id?: Maybe<ID_Input>;
  name: String;
  region?: Maybe<RegionCreateOneInput>;
  address?: Maybe<String>;
  email?: Maybe<String>;
  phone: String;
  schoolCode: String;
  classes?: Maybe<ClassroomCreateManyWithoutSchoolInput>;
  subjects?: Maybe<SubjectCreateManyWithoutSchoolInput>;
  imageUrl?: Maybe<String>;
  level?: Maybe<Level>;
  students?: Maybe<StudentCreateManyWithoutSchoolInput>;
}

export interface RegionCreateOneInput {
  create?: Maybe<RegionCreateInput>;
  connect?: Maybe<RegionWhereUniqueInput>;
}

export interface RegionCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  country?: Maybe<CountryCreateOneInput>;
}

export interface CountryCreateOneInput {
  create?: Maybe<CountryCreateInput>;
  connect?: Maybe<CountryWhereUniqueInput>;
}

export interface CountryCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface ClassroomCreateManyWithoutSchoolInput {
  create?: Maybe<
    ClassroomCreateWithoutSchoolInput[] | ClassroomCreateWithoutSchoolInput
  >;
  connect?: Maybe<ClassroomWhereUniqueInput[] | ClassroomWhereUniqueInput>;
}

export interface ClassroomCreateWithoutSchoolInput {
  id?: Maybe<ID_Input>;
  name: String;
  level: ClassLevelCreateOneWithoutClassRoomsInput;
  capacity: String;
  classTeacher?: Maybe<UserCreateOneInput>;
  students?: Maybe<StudentCreateManyWithoutClassInput>;
  subjects?: Maybe<ClassSubjectCreateManyWithoutClassInput>;
}

export interface ClassLevelCreateOneWithoutClassRoomsInput {
  create?: Maybe<ClassLevelCreateWithoutClassRoomsInput>;
  connect?: Maybe<ClassLevelWhereUniqueInput>;
}

export interface ClassLevelCreateWithoutClassRoomsInput {
  id?: Maybe<ID_Input>;
  levelName: String;
  description?: Maybe<String>;
  school?: Maybe<SchoolCreateOneWithoutClassLevelsInput>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  firstName: String;
  middleName?: Maybe<String>;
  lastName: String;
  email?: Maybe<String>;
  school?: Maybe<SchoolCreateOneInput>;
  phone?: Maybe<String>;
  password: String;
  gender?: Maybe<Gender>;
  role?: Maybe<Role>;
}

export interface SchoolCreateOneInput {
  create?: Maybe<SchoolCreateInput>;
  connect?: Maybe<SchoolWhereUniqueInput>;
}

export interface SchoolCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  region?: Maybe<RegionCreateOneInput>;
  address?: Maybe<String>;
  email?: Maybe<String>;
  phone: String;
  schoolCode: String;
  classes?: Maybe<ClassroomCreateManyWithoutSchoolInput>;
  subjects?: Maybe<SubjectCreateManyWithoutSchoolInput>;
  imageUrl?: Maybe<String>;
  level?: Maybe<Level>;
  students?: Maybe<StudentCreateManyWithoutSchoolInput>;
  classLevels?: Maybe<ClassLevelCreateManyWithoutSchoolInput>;
}

export interface SubjectCreateManyWithoutSchoolInput {
  create?: Maybe<
    SubjectCreateWithoutSchoolInput[] | SubjectCreateWithoutSchoolInput
  >;
  connect?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
}

export interface SubjectCreateWithoutSchoolInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface StudentCreateManyWithoutSchoolInput {
  create?: Maybe<
    StudentCreateWithoutSchoolInput[] | StudentCreateWithoutSchoolInput
  >;
  connect?: Maybe<StudentWhereUniqueInput[] | StudentWhereUniqueInput>;
}

export interface StudentCreateWithoutSchoolInput {
  id?: Maybe<ID_Input>;
  firstName: String;
  middleName?: Maybe<String>;
  lastName: String;
  admNo: String;
  domitory?: Maybe<String>;
  class?: Maybe<ClassroomCreateOneWithoutStudentsInput>;
  feeBalance?: Maybe<String>;
  subjects?: Maybe<ClassSubjectCreateManyInput>;
  gender?: Maybe<Gender>;
  prefect?: Maybe<Prefect>;
}

export interface ClassroomCreateOneWithoutStudentsInput {
  create?: Maybe<ClassroomCreateWithoutStudentsInput>;
  connect?: Maybe<ClassroomWhereUniqueInput>;
}

export interface ClassroomCreateWithoutStudentsInput {
  id?: Maybe<ID_Input>;
  name: String;
  level: ClassLevelCreateOneWithoutClassRoomsInput;
  school?: Maybe<SchoolCreateOneWithoutClassesInput>;
  capacity: String;
  classTeacher?: Maybe<UserCreateOneInput>;
  subjects?: Maybe<ClassSubjectCreateManyWithoutClassInput>;
}

export interface SchoolCreateOneWithoutClassesInput {
  create?: Maybe<SchoolCreateWithoutClassesInput>;
  connect?: Maybe<SchoolWhereUniqueInput>;
}

export interface SchoolCreateWithoutClassesInput {
  id?: Maybe<ID_Input>;
  name: String;
  region?: Maybe<RegionCreateOneInput>;
  address?: Maybe<String>;
  email?: Maybe<String>;
  phone: String;
  schoolCode: String;
  subjects?: Maybe<SubjectCreateManyWithoutSchoolInput>;
  imageUrl?: Maybe<String>;
  level?: Maybe<Level>;
  students?: Maybe<StudentCreateManyWithoutSchoolInput>;
  classLevels?: Maybe<ClassLevelCreateManyWithoutSchoolInput>;
}

export interface ClassLevelCreateManyWithoutSchoolInput {
  create?: Maybe<
    ClassLevelCreateWithoutSchoolInput[] | ClassLevelCreateWithoutSchoolInput
  >;
  connect?: Maybe<ClassLevelWhereUniqueInput[] | ClassLevelWhereUniqueInput>;
}

export interface ClassLevelCreateWithoutSchoolInput {
  id?: Maybe<ID_Input>;
  levelName: String;
  description?: Maybe<String>;
  classRooms?: Maybe<ClassroomCreateManyWithoutLevelInput>;
}

export interface ClassroomCreateManyWithoutLevelInput {
  create?: Maybe<
    ClassroomCreateWithoutLevelInput[] | ClassroomCreateWithoutLevelInput
  >;
  connect?: Maybe<ClassroomWhereUniqueInput[] | ClassroomWhereUniqueInput>;
}

export interface ClassroomCreateWithoutLevelInput {
  id?: Maybe<ID_Input>;
  name: String;
  school?: Maybe<SchoolCreateOneWithoutClassesInput>;
  capacity: String;
  classTeacher?: Maybe<UserCreateOneInput>;
  students?: Maybe<StudentCreateManyWithoutClassInput>;
  subjects?: Maybe<ClassSubjectCreateManyWithoutClassInput>;
}

export interface StudentCreateManyWithoutClassInput {
  create?: Maybe<
    StudentCreateWithoutClassInput[] | StudentCreateWithoutClassInput
  >;
  connect?: Maybe<StudentWhereUniqueInput[] | StudentWhereUniqueInput>;
}

export interface StudentCreateWithoutClassInput {
  id?: Maybe<ID_Input>;
  firstName: String;
  middleName?: Maybe<String>;
  lastName: String;
  admNo: String;
  domitory?: Maybe<String>;
  feeBalance?: Maybe<String>;
  subjects?: Maybe<ClassSubjectCreateManyInput>;
  gender?: Maybe<Gender>;
  school: SchoolCreateOneWithoutStudentsInput;
  prefect?: Maybe<Prefect>;
}

export interface ClassSubjectCreateManyInput {
  create?: Maybe<ClassSubjectCreateInput[] | ClassSubjectCreateInput>;
  connect?: Maybe<
    ClassSubjectWhereUniqueInput[] | ClassSubjectWhereUniqueInput
  >;
}

export interface ClassSubjectCreateInput {
  id?: Maybe<ID_Input>;
  subject: SubjectCreateOneInput;
  assignee?: Maybe<UserCreateOneInput>;
  class: ClassroomCreateOneWithoutSubjectsInput;
}

export interface SubjectCreateOneInput {
  create?: Maybe<SubjectCreateInput>;
  connect?: Maybe<SubjectWhereUniqueInput>;
}

export interface SubjectCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  school: SchoolCreateOneWithoutSubjectsInput;
}

export interface SchoolCreateOneWithoutSubjectsInput {
  create?: Maybe<SchoolCreateWithoutSubjectsInput>;
  connect?: Maybe<SchoolWhereUniqueInput>;
}

export interface SchoolCreateWithoutSubjectsInput {
  id?: Maybe<ID_Input>;
  name: String;
  region?: Maybe<RegionCreateOneInput>;
  address?: Maybe<String>;
  email?: Maybe<String>;
  phone: String;
  schoolCode: String;
  classes?: Maybe<ClassroomCreateManyWithoutSchoolInput>;
  imageUrl?: Maybe<String>;
  level?: Maybe<Level>;
  students?: Maybe<StudentCreateManyWithoutSchoolInput>;
  classLevels?: Maybe<ClassLevelCreateManyWithoutSchoolInput>;
}

export interface ClassroomCreateOneWithoutSubjectsInput {
  create?: Maybe<ClassroomCreateWithoutSubjectsInput>;
  connect?: Maybe<ClassroomWhereUniqueInput>;
}

export interface ClassroomCreateWithoutSubjectsInput {
  id?: Maybe<ID_Input>;
  name: String;
  level: ClassLevelCreateOneWithoutClassRoomsInput;
  school?: Maybe<SchoolCreateOneWithoutClassesInput>;
  capacity: String;
  classTeacher?: Maybe<UserCreateOneInput>;
  students?: Maybe<StudentCreateManyWithoutClassInput>;
}

export interface SchoolCreateOneWithoutStudentsInput {
  create?: Maybe<SchoolCreateWithoutStudentsInput>;
  connect?: Maybe<SchoolWhereUniqueInput>;
}

export interface SchoolCreateWithoutStudentsInput {
  id?: Maybe<ID_Input>;
  name: String;
  region?: Maybe<RegionCreateOneInput>;
  address?: Maybe<String>;
  email?: Maybe<String>;
  phone: String;
  schoolCode: String;
  classes?: Maybe<ClassroomCreateManyWithoutSchoolInput>;
  subjects?: Maybe<SubjectCreateManyWithoutSchoolInput>;
  imageUrl?: Maybe<String>;
  level?: Maybe<Level>;
  classLevels?: Maybe<ClassLevelCreateManyWithoutSchoolInput>;
}

export interface ClassSubjectCreateManyWithoutClassInput {
  create?: Maybe<
    ClassSubjectCreateWithoutClassInput[] | ClassSubjectCreateWithoutClassInput
  >;
  connect?: Maybe<
    ClassSubjectWhereUniqueInput[] | ClassSubjectWhereUniqueInput
  >;
}

export interface ClassSubjectCreateWithoutClassInput {
  id?: Maybe<ID_Input>;
  subject: SubjectCreateOneInput;
  assignee?: Maybe<UserCreateOneInput>;
}

export interface ClassLevelUpdateInput {
  levelName?: Maybe<String>;
  description?: Maybe<String>;
  school?: Maybe<SchoolUpdateOneWithoutClassLevelsInput>;
  classRooms?: Maybe<ClassroomUpdateManyWithoutLevelInput>;
}

export interface SchoolUpdateOneWithoutClassLevelsInput {
  create?: Maybe<SchoolCreateWithoutClassLevelsInput>;
  update?: Maybe<SchoolUpdateWithoutClassLevelsDataInput>;
  upsert?: Maybe<SchoolUpsertWithoutClassLevelsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<SchoolWhereUniqueInput>;
}

export interface SchoolUpdateWithoutClassLevelsDataInput {
  name?: Maybe<String>;
  region?: Maybe<RegionUpdateOneInput>;
  address?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  schoolCode?: Maybe<String>;
  classes?: Maybe<ClassroomUpdateManyWithoutSchoolInput>;
  subjects?: Maybe<SubjectUpdateManyWithoutSchoolInput>;
  imageUrl?: Maybe<String>;
  level?: Maybe<Level>;
  students?: Maybe<StudentUpdateManyWithoutSchoolInput>;
}

export interface RegionUpdateOneInput {
  create?: Maybe<RegionCreateInput>;
  update?: Maybe<RegionUpdateDataInput>;
  upsert?: Maybe<RegionUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<RegionWhereUniqueInput>;
}

export interface RegionUpdateDataInput {
  name?: Maybe<String>;
  country?: Maybe<CountryUpdateOneInput>;
}

export interface CountryUpdateOneInput {
  create?: Maybe<CountryCreateInput>;
  update?: Maybe<CountryUpdateDataInput>;
  upsert?: Maybe<CountryUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<CountryWhereUniqueInput>;
}

export interface CountryUpdateDataInput {
  name?: Maybe<String>;
}

export interface CountryUpsertNestedInput {
  update: CountryUpdateDataInput;
  create: CountryCreateInput;
}

export interface RegionUpsertNestedInput {
  update: RegionUpdateDataInput;
  create: RegionCreateInput;
}

export interface ClassroomUpdateManyWithoutSchoolInput {
  create?: Maybe<
    ClassroomCreateWithoutSchoolInput[] | ClassroomCreateWithoutSchoolInput
  >;
  delete?: Maybe<ClassroomWhereUniqueInput[] | ClassroomWhereUniqueInput>;
  connect?: Maybe<ClassroomWhereUniqueInput[] | ClassroomWhereUniqueInput>;
  set?: Maybe<ClassroomWhereUniqueInput[] | ClassroomWhereUniqueInput>;
  disconnect?: Maybe<ClassroomWhereUniqueInput[] | ClassroomWhereUniqueInput>;
  update?: Maybe<
    | ClassroomUpdateWithWhereUniqueWithoutSchoolInput[]
    | ClassroomUpdateWithWhereUniqueWithoutSchoolInput
  >;
  upsert?: Maybe<
    | ClassroomUpsertWithWhereUniqueWithoutSchoolInput[]
    | ClassroomUpsertWithWhereUniqueWithoutSchoolInput
  >;
  deleteMany?: Maybe<ClassroomScalarWhereInput[] | ClassroomScalarWhereInput>;
  updateMany?: Maybe<
    | ClassroomUpdateManyWithWhereNestedInput[]
    | ClassroomUpdateManyWithWhereNestedInput
  >;
}

export interface ClassroomUpdateWithWhereUniqueWithoutSchoolInput {
  where: ClassroomWhereUniqueInput;
  data: ClassroomUpdateWithoutSchoolDataInput;
}

export interface ClassroomUpdateWithoutSchoolDataInput {
  name?: Maybe<String>;
  level?: Maybe<ClassLevelUpdateOneRequiredWithoutClassRoomsInput>;
  capacity?: Maybe<String>;
  classTeacher?: Maybe<UserUpdateOneInput>;
  students?: Maybe<StudentUpdateManyWithoutClassInput>;
  subjects?: Maybe<ClassSubjectUpdateManyWithoutClassInput>;
}

export interface ClassLevelUpdateOneRequiredWithoutClassRoomsInput {
  create?: Maybe<ClassLevelCreateWithoutClassRoomsInput>;
  update?: Maybe<ClassLevelUpdateWithoutClassRoomsDataInput>;
  upsert?: Maybe<ClassLevelUpsertWithoutClassRoomsInput>;
  connect?: Maybe<ClassLevelWhereUniqueInput>;
}

export interface ClassLevelUpdateWithoutClassRoomsDataInput {
  levelName?: Maybe<String>;
  description?: Maybe<String>;
  school?: Maybe<SchoolUpdateOneWithoutClassLevelsInput>;
}

export interface ClassLevelUpsertWithoutClassRoomsInput {
  update: ClassLevelUpdateWithoutClassRoomsDataInput;
  create: ClassLevelCreateWithoutClassRoomsInput;
}

export interface UserUpdateOneInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  firstName?: Maybe<String>;
  middleName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  school?: Maybe<SchoolUpdateOneInput>;
  phone?: Maybe<String>;
  password?: Maybe<String>;
  gender?: Maybe<Gender>;
  role?: Maybe<Role>;
}

export interface SchoolUpdateOneInput {
  create?: Maybe<SchoolCreateInput>;
  update?: Maybe<SchoolUpdateDataInput>;
  upsert?: Maybe<SchoolUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<SchoolWhereUniqueInput>;
}

export interface SchoolUpdateDataInput {
  name?: Maybe<String>;
  region?: Maybe<RegionUpdateOneInput>;
  address?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  schoolCode?: Maybe<String>;
  classes?: Maybe<ClassroomUpdateManyWithoutSchoolInput>;
  subjects?: Maybe<SubjectUpdateManyWithoutSchoolInput>;
  imageUrl?: Maybe<String>;
  level?: Maybe<Level>;
  students?: Maybe<StudentUpdateManyWithoutSchoolInput>;
  classLevels?: Maybe<ClassLevelUpdateManyWithoutSchoolInput>;
}

export interface SubjectUpdateManyWithoutSchoolInput {
  create?: Maybe<
    SubjectCreateWithoutSchoolInput[] | SubjectCreateWithoutSchoolInput
  >;
  delete?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
  connect?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
  set?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
  disconnect?: Maybe<SubjectWhereUniqueInput[] | SubjectWhereUniqueInput>;
  update?: Maybe<
    | SubjectUpdateWithWhereUniqueWithoutSchoolInput[]
    | SubjectUpdateWithWhereUniqueWithoutSchoolInput
  >;
  upsert?: Maybe<
    | SubjectUpsertWithWhereUniqueWithoutSchoolInput[]
    | SubjectUpsertWithWhereUniqueWithoutSchoolInput
  >;
  deleteMany?: Maybe<SubjectScalarWhereInput[] | SubjectScalarWhereInput>;
  updateMany?: Maybe<
    | SubjectUpdateManyWithWhereNestedInput[]
    | SubjectUpdateManyWithWhereNestedInput
  >;
}

export interface SubjectUpdateWithWhereUniqueWithoutSchoolInput {
  where: SubjectWhereUniqueInput;
  data: SubjectUpdateWithoutSchoolDataInput;
}

export interface SubjectUpdateWithoutSchoolDataInput {
  name?: Maybe<String>;
}

export interface SubjectUpsertWithWhereUniqueWithoutSchoolInput {
  where: SubjectWhereUniqueInput;
  update: SubjectUpdateWithoutSchoolDataInput;
  create: SubjectCreateWithoutSchoolInput;
}

export interface SubjectScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SubjectScalarWhereInput[] | SubjectScalarWhereInput>;
  OR?: Maybe<SubjectScalarWhereInput[] | SubjectScalarWhereInput>;
  NOT?: Maybe<SubjectScalarWhereInput[] | SubjectScalarWhereInput>;
}

export interface SubjectUpdateManyWithWhereNestedInput {
  where: SubjectScalarWhereInput;
  data: SubjectUpdateManyDataInput;
}

export interface SubjectUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface StudentUpdateManyWithoutSchoolInput {
  create?: Maybe<
    StudentCreateWithoutSchoolInput[] | StudentCreateWithoutSchoolInput
  >;
  delete?: Maybe<StudentWhereUniqueInput[] | StudentWhereUniqueInput>;
  connect?: Maybe<StudentWhereUniqueInput[] | StudentWhereUniqueInput>;
  set?: Maybe<StudentWhereUniqueInput[] | StudentWhereUniqueInput>;
  disconnect?: Maybe<StudentWhereUniqueInput[] | StudentWhereUniqueInput>;
  update?: Maybe<
    | StudentUpdateWithWhereUniqueWithoutSchoolInput[]
    | StudentUpdateWithWhereUniqueWithoutSchoolInput
  >;
  upsert?: Maybe<
    | StudentUpsertWithWhereUniqueWithoutSchoolInput[]
    | StudentUpsertWithWhereUniqueWithoutSchoolInput
  >;
  deleteMany?: Maybe<StudentScalarWhereInput[] | StudentScalarWhereInput>;
  updateMany?: Maybe<
    | StudentUpdateManyWithWhereNestedInput[]
    | StudentUpdateManyWithWhereNestedInput
  >;
}

export interface StudentUpdateWithWhereUniqueWithoutSchoolInput {
  where: StudentWhereUniqueInput;
  data: StudentUpdateWithoutSchoolDataInput;
}

export interface StudentUpdateWithoutSchoolDataInput {
  firstName?: Maybe<String>;
  middleName?: Maybe<String>;
  lastName?: Maybe<String>;
  admNo?: Maybe<String>;
  domitory?: Maybe<String>;
  class?: Maybe<ClassroomUpdateOneWithoutStudentsInput>;
  feeBalance?: Maybe<String>;
  subjects?: Maybe<ClassSubjectUpdateManyInput>;
  gender?: Maybe<Gender>;
  prefect?: Maybe<Prefect>;
}

export interface ClassroomUpdateOneWithoutStudentsInput {
  create?: Maybe<ClassroomCreateWithoutStudentsInput>;
  update?: Maybe<ClassroomUpdateWithoutStudentsDataInput>;
  upsert?: Maybe<ClassroomUpsertWithoutStudentsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ClassroomWhereUniqueInput>;
}

export interface ClassroomUpdateWithoutStudentsDataInput {
  name?: Maybe<String>;
  level?: Maybe<ClassLevelUpdateOneRequiredWithoutClassRoomsInput>;
  school?: Maybe<SchoolUpdateOneWithoutClassesInput>;
  capacity?: Maybe<String>;
  classTeacher?: Maybe<UserUpdateOneInput>;
  subjects?: Maybe<ClassSubjectUpdateManyWithoutClassInput>;
}

export interface SchoolUpdateOneWithoutClassesInput {
  create?: Maybe<SchoolCreateWithoutClassesInput>;
  update?: Maybe<SchoolUpdateWithoutClassesDataInput>;
  upsert?: Maybe<SchoolUpsertWithoutClassesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<SchoolWhereUniqueInput>;
}

export interface SchoolUpdateWithoutClassesDataInput {
  name?: Maybe<String>;
  region?: Maybe<RegionUpdateOneInput>;
  address?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  schoolCode?: Maybe<String>;
  subjects?: Maybe<SubjectUpdateManyWithoutSchoolInput>;
  imageUrl?: Maybe<String>;
  level?: Maybe<Level>;
  students?: Maybe<StudentUpdateManyWithoutSchoolInput>;
  classLevels?: Maybe<ClassLevelUpdateManyWithoutSchoolInput>;
}

export interface ClassLevelUpdateManyWithoutSchoolInput {
  create?: Maybe<
    ClassLevelCreateWithoutSchoolInput[] | ClassLevelCreateWithoutSchoolInput
  >;
  delete?: Maybe<ClassLevelWhereUniqueInput[] | ClassLevelWhereUniqueInput>;
  connect?: Maybe<ClassLevelWhereUniqueInput[] | ClassLevelWhereUniqueInput>;
  set?: Maybe<ClassLevelWhereUniqueInput[] | ClassLevelWhereUniqueInput>;
  disconnect?: Maybe<ClassLevelWhereUniqueInput[] | ClassLevelWhereUniqueInput>;
  update?: Maybe<
    | ClassLevelUpdateWithWhereUniqueWithoutSchoolInput[]
    | ClassLevelUpdateWithWhereUniqueWithoutSchoolInput
  >;
  upsert?: Maybe<
    | ClassLevelUpsertWithWhereUniqueWithoutSchoolInput[]
    | ClassLevelUpsertWithWhereUniqueWithoutSchoolInput
  >;
  deleteMany?: Maybe<ClassLevelScalarWhereInput[] | ClassLevelScalarWhereInput>;
  updateMany?: Maybe<
    | ClassLevelUpdateManyWithWhereNestedInput[]
    | ClassLevelUpdateManyWithWhereNestedInput
  >;
}

export interface ClassLevelUpdateWithWhereUniqueWithoutSchoolInput {
  where: ClassLevelWhereUniqueInput;
  data: ClassLevelUpdateWithoutSchoolDataInput;
}

export interface ClassLevelUpdateWithoutSchoolDataInput {
  levelName?: Maybe<String>;
  description?: Maybe<String>;
  classRooms?: Maybe<ClassroomUpdateManyWithoutLevelInput>;
}

export interface ClassroomUpdateManyWithoutLevelInput {
  create?: Maybe<
    ClassroomCreateWithoutLevelInput[] | ClassroomCreateWithoutLevelInput
  >;
  delete?: Maybe<ClassroomWhereUniqueInput[] | ClassroomWhereUniqueInput>;
  connect?: Maybe<ClassroomWhereUniqueInput[] | ClassroomWhereUniqueInput>;
  set?: Maybe<ClassroomWhereUniqueInput[] | ClassroomWhereUniqueInput>;
  disconnect?: Maybe<ClassroomWhereUniqueInput[] | ClassroomWhereUniqueInput>;
  update?: Maybe<
    | ClassroomUpdateWithWhereUniqueWithoutLevelInput[]
    | ClassroomUpdateWithWhereUniqueWithoutLevelInput
  >;
  upsert?: Maybe<
    | ClassroomUpsertWithWhereUniqueWithoutLevelInput[]
    | ClassroomUpsertWithWhereUniqueWithoutLevelInput
  >;
  deleteMany?: Maybe<ClassroomScalarWhereInput[] | ClassroomScalarWhereInput>;
  updateMany?: Maybe<
    | ClassroomUpdateManyWithWhereNestedInput[]
    | ClassroomUpdateManyWithWhereNestedInput
  >;
}

export interface ClassroomUpdateWithWhereUniqueWithoutLevelInput {
  where: ClassroomWhereUniqueInput;
  data: ClassroomUpdateWithoutLevelDataInput;
}

export interface ClassroomUpdateWithoutLevelDataInput {
  name?: Maybe<String>;
  school?: Maybe<SchoolUpdateOneWithoutClassesInput>;
  capacity?: Maybe<String>;
  classTeacher?: Maybe<UserUpdateOneInput>;
  students?: Maybe<StudentUpdateManyWithoutClassInput>;
  subjects?: Maybe<ClassSubjectUpdateManyWithoutClassInput>;
}

export interface StudentUpdateManyWithoutClassInput {
  create?: Maybe<
    StudentCreateWithoutClassInput[] | StudentCreateWithoutClassInput
  >;
  delete?: Maybe<StudentWhereUniqueInput[] | StudentWhereUniqueInput>;
  connect?: Maybe<StudentWhereUniqueInput[] | StudentWhereUniqueInput>;
  set?: Maybe<StudentWhereUniqueInput[] | StudentWhereUniqueInput>;
  disconnect?: Maybe<StudentWhereUniqueInput[] | StudentWhereUniqueInput>;
  update?: Maybe<
    | StudentUpdateWithWhereUniqueWithoutClassInput[]
    | StudentUpdateWithWhereUniqueWithoutClassInput
  >;
  upsert?: Maybe<
    | StudentUpsertWithWhereUniqueWithoutClassInput[]
    | StudentUpsertWithWhereUniqueWithoutClassInput
  >;
  deleteMany?: Maybe<StudentScalarWhereInput[] | StudentScalarWhereInput>;
  updateMany?: Maybe<
    | StudentUpdateManyWithWhereNestedInput[]
    | StudentUpdateManyWithWhereNestedInput
  >;
}

export interface StudentUpdateWithWhereUniqueWithoutClassInput {
  where: StudentWhereUniqueInput;
  data: StudentUpdateWithoutClassDataInput;
}

export interface StudentUpdateWithoutClassDataInput {
  firstName?: Maybe<String>;
  middleName?: Maybe<String>;
  lastName?: Maybe<String>;
  admNo?: Maybe<String>;
  domitory?: Maybe<String>;
  feeBalance?: Maybe<String>;
  subjects?: Maybe<ClassSubjectUpdateManyInput>;
  gender?: Maybe<Gender>;
  school?: Maybe<SchoolUpdateOneRequiredWithoutStudentsInput>;
  prefect?: Maybe<Prefect>;
}

export interface ClassSubjectUpdateManyInput {
  create?: Maybe<ClassSubjectCreateInput[] | ClassSubjectCreateInput>;
  update?: Maybe<
    | ClassSubjectUpdateWithWhereUniqueNestedInput[]
    | ClassSubjectUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | ClassSubjectUpsertWithWhereUniqueNestedInput[]
    | ClassSubjectUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<ClassSubjectWhereUniqueInput[] | ClassSubjectWhereUniqueInput>;
  connect?: Maybe<
    ClassSubjectWhereUniqueInput[] | ClassSubjectWhereUniqueInput
  >;
  set?: Maybe<ClassSubjectWhereUniqueInput[] | ClassSubjectWhereUniqueInput>;
  disconnect?: Maybe<
    ClassSubjectWhereUniqueInput[] | ClassSubjectWhereUniqueInput
  >;
  deleteMany?: Maybe<
    ClassSubjectScalarWhereInput[] | ClassSubjectScalarWhereInput
  >;
}

export interface ClassSubjectUpdateWithWhereUniqueNestedInput {
  where: ClassSubjectWhereUniqueInput;
  data: ClassSubjectUpdateDataInput;
}

export interface ClassSubjectUpdateDataInput {
  subject?: Maybe<SubjectUpdateOneRequiredInput>;
  assignee?: Maybe<UserUpdateOneInput>;
  class?: Maybe<ClassroomUpdateOneRequiredWithoutSubjectsInput>;
}

export interface SubjectUpdateOneRequiredInput {
  create?: Maybe<SubjectCreateInput>;
  update?: Maybe<SubjectUpdateDataInput>;
  upsert?: Maybe<SubjectUpsertNestedInput>;
  connect?: Maybe<SubjectWhereUniqueInput>;
}

export interface SubjectUpdateDataInput {
  name?: Maybe<String>;
  school?: Maybe<SchoolUpdateOneRequiredWithoutSubjectsInput>;
}

export interface SchoolUpdateOneRequiredWithoutSubjectsInput {
  create?: Maybe<SchoolCreateWithoutSubjectsInput>;
  update?: Maybe<SchoolUpdateWithoutSubjectsDataInput>;
  upsert?: Maybe<SchoolUpsertWithoutSubjectsInput>;
  connect?: Maybe<SchoolWhereUniqueInput>;
}

export interface SchoolUpdateWithoutSubjectsDataInput {
  name?: Maybe<String>;
  region?: Maybe<RegionUpdateOneInput>;
  address?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  schoolCode?: Maybe<String>;
  classes?: Maybe<ClassroomUpdateManyWithoutSchoolInput>;
  imageUrl?: Maybe<String>;
  level?: Maybe<Level>;
  students?: Maybe<StudentUpdateManyWithoutSchoolInput>;
  classLevels?: Maybe<ClassLevelUpdateManyWithoutSchoolInput>;
}

export interface SchoolUpsertWithoutSubjectsInput {
  update: SchoolUpdateWithoutSubjectsDataInput;
  create: SchoolCreateWithoutSubjectsInput;
}

export interface SubjectUpsertNestedInput {
  update: SubjectUpdateDataInput;
  create: SubjectCreateInput;
}

export interface ClassroomUpdateOneRequiredWithoutSubjectsInput {
  create?: Maybe<ClassroomCreateWithoutSubjectsInput>;
  update?: Maybe<ClassroomUpdateWithoutSubjectsDataInput>;
  upsert?: Maybe<ClassroomUpsertWithoutSubjectsInput>;
  connect?: Maybe<ClassroomWhereUniqueInput>;
}

export interface ClassroomUpdateWithoutSubjectsDataInput {
  name?: Maybe<String>;
  level?: Maybe<ClassLevelUpdateOneRequiredWithoutClassRoomsInput>;
  school?: Maybe<SchoolUpdateOneWithoutClassesInput>;
  capacity?: Maybe<String>;
  classTeacher?: Maybe<UserUpdateOneInput>;
  students?: Maybe<StudentUpdateManyWithoutClassInput>;
}

export interface ClassroomUpsertWithoutSubjectsInput {
  update: ClassroomUpdateWithoutSubjectsDataInput;
  create: ClassroomCreateWithoutSubjectsInput;
}

export interface ClassSubjectUpsertWithWhereUniqueNestedInput {
  where: ClassSubjectWhereUniqueInput;
  update: ClassSubjectUpdateDataInput;
  create: ClassSubjectCreateInput;
}

export interface ClassSubjectScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  AND?: Maybe<ClassSubjectScalarWhereInput[] | ClassSubjectScalarWhereInput>;
  OR?: Maybe<ClassSubjectScalarWhereInput[] | ClassSubjectScalarWhereInput>;
  NOT?: Maybe<ClassSubjectScalarWhereInput[] | ClassSubjectScalarWhereInput>;
}

export interface SchoolUpdateOneRequiredWithoutStudentsInput {
  create?: Maybe<SchoolCreateWithoutStudentsInput>;
  update?: Maybe<SchoolUpdateWithoutStudentsDataInput>;
  upsert?: Maybe<SchoolUpsertWithoutStudentsInput>;
  connect?: Maybe<SchoolWhereUniqueInput>;
}

export interface SchoolUpdateWithoutStudentsDataInput {
  name?: Maybe<String>;
  region?: Maybe<RegionUpdateOneInput>;
  address?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  schoolCode?: Maybe<String>;
  classes?: Maybe<ClassroomUpdateManyWithoutSchoolInput>;
  subjects?: Maybe<SubjectUpdateManyWithoutSchoolInput>;
  imageUrl?: Maybe<String>;
  level?: Maybe<Level>;
  classLevels?: Maybe<ClassLevelUpdateManyWithoutSchoolInput>;
}

export interface SchoolUpsertWithoutStudentsInput {
  update: SchoolUpdateWithoutStudentsDataInput;
  create: SchoolCreateWithoutStudentsInput;
}

export interface StudentUpsertWithWhereUniqueWithoutClassInput {
  where: StudentWhereUniqueInput;
  update: StudentUpdateWithoutClassDataInput;
  create: StudentCreateWithoutClassInput;
}

export interface StudentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  middleName?: Maybe<String>;
  middleName_not?: Maybe<String>;
  middleName_in?: Maybe<String[] | String>;
  middleName_not_in?: Maybe<String[] | String>;
  middleName_lt?: Maybe<String>;
  middleName_lte?: Maybe<String>;
  middleName_gt?: Maybe<String>;
  middleName_gte?: Maybe<String>;
  middleName_contains?: Maybe<String>;
  middleName_not_contains?: Maybe<String>;
  middleName_starts_with?: Maybe<String>;
  middleName_not_starts_with?: Maybe<String>;
  middleName_ends_with?: Maybe<String>;
  middleName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  admNo?: Maybe<String>;
  admNo_not?: Maybe<String>;
  admNo_in?: Maybe<String[] | String>;
  admNo_not_in?: Maybe<String[] | String>;
  admNo_lt?: Maybe<String>;
  admNo_lte?: Maybe<String>;
  admNo_gt?: Maybe<String>;
  admNo_gte?: Maybe<String>;
  admNo_contains?: Maybe<String>;
  admNo_not_contains?: Maybe<String>;
  admNo_starts_with?: Maybe<String>;
  admNo_not_starts_with?: Maybe<String>;
  admNo_ends_with?: Maybe<String>;
  admNo_not_ends_with?: Maybe<String>;
  domitory?: Maybe<String>;
  domitory_not?: Maybe<String>;
  domitory_in?: Maybe<String[] | String>;
  domitory_not_in?: Maybe<String[] | String>;
  domitory_lt?: Maybe<String>;
  domitory_lte?: Maybe<String>;
  domitory_gt?: Maybe<String>;
  domitory_gte?: Maybe<String>;
  domitory_contains?: Maybe<String>;
  domitory_not_contains?: Maybe<String>;
  domitory_starts_with?: Maybe<String>;
  domitory_not_starts_with?: Maybe<String>;
  domitory_ends_with?: Maybe<String>;
  domitory_not_ends_with?: Maybe<String>;
  feeBalance?: Maybe<String>;
  feeBalance_not?: Maybe<String>;
  feeBalance_in?: Maybe<String[] | String>;
  feeBalance_not_in?: Maybe<String[] | String>;
  feeBalance_lt?: Maybe<String>;
  feeBalance_lte?: Maybe<String>;
  feeBalance_gt?: Maybe<String>;
  feeBalance_gte?: Maybe<String>;
  feeBalance_contains?: Maybe<String>;
  feeBalance_not_contains?: Maybe<String>;
  feeBalance_starts_with?: Maybe<String>;
  feeBalance_not_starts_with?: Maybe<String>;
  feeBalance_ends_with?: Maybe<String>;
  feeBalance_not_ends_with?: Maybe<String>;
  gender?: Maybe<Gender>;
  gender_not?: Maybe<Gender>;
  gender_in?: Maybe<Gender[] | Gender>;
  gender_not_in?: Maybe<Gender[] | Gender>;
  prefect?: Maybe<Prefect>;
  prefect_not?: Maybe<Prefect>;
  prefect_in?: Maybe<Prefect[] | Prefect>;
  prefect_not_in?: Maybe<Prefect[] | Prefect>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<StudentScalarWhereInput[] | StudentScalarWhereInput>;
  OR?: Maybe<StudentScalarWhereInput[] | StudentScalarWhereInput>;
  NOT?: Maybe<StudentScalarWhereInput[] | StudentScalarWhereInput>;
}

export interface StudentUpdateManyWithWhereNestedInput {
  where: StudentScalarWhereInput;
  data: StudentUpdateManyDataInput;
}

export interface StudentUpdateManyDataInput {
  firstName?: Maybe<String>;
  middleName?: Maybe<String>;
  lastName?: Maybe<String>;
  admNo?: Maybe<String>;
  domitory?: Maybe<String>;
  feeBalance?: Maybe<String>;
  gender?: Maybe<Gender>;
  prefect?: Maybe<Prefect>;
}

export interface ClassSubjectUpdateManyWithoutClassInput {
  create?: Maybe<
    ClassSubjectCreateWithoutClassInput[] | ClassSubjectCreateWithoutClassInput
  >;
  delete?: Maybe<ClassSubjectWhereUniqueInput[] | ClassSubjectWhereUniqueInput>;
  connect?: Maybe<
    ClassSubjectWhereUniqueInput[] | ClassSubjectWhereUniqueInput
  >;
  set?: Maybe<ClassSubjectWhereUniqueInput[] | ClassSubjectWhereUniqueInput>;
  disconnect?: Maybe<
    ClassSubjectWhereUniqueInput[] | ClassSubjectWhereUniqueInput
  >;
  update?: Maybe<
    | ClassSubjectUpdateWithWhereUniqueWithoutClassInput[]
    | ClassSubjectUpdateWithWhereUniqueWithoutClassInput
  >;
  upsert?: Maybe<
    | ClassSubjectUpsertWithWhereUniqueWithoutClassInput[]
    | ClassSubjectUpsertWithWhereUniqueWithoutClassInput
  >;
  deleteMany?: Maybe<
    ClassSubjectScalarWhereInput[] | ClassSubjectScalarWhereInput
  >;
}

export interface ClassSubjectUpdateWithWhereUniqueWithoutClassInput {
  where: ClassSubjectWhereUniqueInput;
  data: ClassSubjectUpdateWithoutClassDataInput;
}

export interface ClassSubjectUpdateWithoutClassDataInput {
  subject?: Maybe<SubjectUpdateOneRequiredInput>;
  assignee?: Maybe<UserUpdateOneInput>;
}

export interface ClassSubjectUpsertWithWhereUniqueWithoutClassInput {
  where: ClassSubjectWhereUniqueInput;
  update: ClassSubjectUpdateWithoutClassDataInput;
  create: ClassSubjectCreateWithoutClassInput;
}

export interface ClassroomUpsertWithWhereUniqueWithoutLevelInput {
  where: ClassroomWhereUniqueInput;
  update: ClassroomUpdateWithoutLevelDataInput;
  create: ClassroomCreateWithoutLevelInput;
}

export interface ClassroomScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  capacity?: Maybe<String>;
  capacity_not?: Maybe<String>;
  capacity_in?: Maybe<String[] | String>;
  capacity_not_in?: Maybe<String[] | String>;
  capacity_lt?: Maybe<String>;
  capacity_lte?: Maybe<String>;
  capacity_gt?: Maybe<String>;
  capacity_gte?: Maybe<String>;
  capacity_contains?: Maybe<String>;
  capacity_not_contains?: Maybe<String>;
  capacity_starts_with?: Maybe<String>;
  capacity_not_starts_with?: Maybe<String>;
  capacity_ends_with?: Maybe<String>;
  capacity_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ClassroomScalarWhereInput[] | ClassroomScalarWhereInput>;
  OR?: Maybe<ClassroomScalarWhereInput[] | ClassroomScalarWhereInput>;
  NOT?: Maybe<ClassroomScalarWhereInput[] | ClassroomScalarWhereInput>;
}

export interface ClassroomUpdateManyWithWhereNestedInput {
  where: ClassroomScalarWhereInput;
  data: ClassroomUpdateManyDataInput;
}

export interface ClassroomUpdateManyDataInput {
  name?: Maybe<String>;
  capacity?: Maybe<String>;
}

export interface ClassLevelUpsertWithWhereUniqueWithoutSchoolInput {
  where: ClassLevelWhereUniqueInput;
  update: ClassLevelUpdateWithoutSchoolDataInput;
  create: ClassLevelCreateWithoutSchoolInput;
}

export interface ClassLevelScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  levelName?: Maybe<String>;
  levelName_not?: Maybe<String>;
  levelName_in?: Maybe<String[] | String>;
  levelName_not_in?: Maybe<String[] | String>;
  levelName_lt?: Maybe<String>;
  levelName_lte?: Maybe<String>;
  levelName_gt?: Maybe<String>;
  levelName_gte?: Maybe<String>;
  levelName_contains?: Maybe<String>;
  levelName_not_contains?: Maybe<String>;
  levelName_starts_with?: Maybe<String>;
  levelName_not_starts_with?: Maybe<String>;
  levelName_ends_with?: Maybe<String>;
  levelName_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  AND?: Maybe<ClassLevelScalarWhereInput[] | ClassLevelScalarWhereInput>;
  OR?: Maybe<ClassLevelScalarWhereInput[] | ClassLevelScalarWhereInput>;
  NOT?: Maybe<ClassLevelScalarWhereInput[] | ClassLevelScalarWhereInput>;
}

export interface ClassLevelUpdateManyWithWhereNestedInput {
  where: ClassLevelScalarWhereInput;
  data: ClassLevelUpdateManyDataInput;
}

export interface ClassLevelUpdateManyDataInput {
  levelName?: Maybe<String>;
  description?: Maybe<String>;
}

export interface SchoolUpsertWithoutClassesInput {
  update: SchoolUpdateWithoutClassesDataInput;
  create: SchoolCreateWithoutClassesInput;
}

export interface ClassroomUpsertWithoutStudentsInput {
  update: ClassroomUpdateWithoutStudentsDataInput;
  create: ClassroomCreateWithoutStudentsInput;
}

export interface StudentUpsertWithWhereUniqueWithoutSchoolInput {
  where: StudentWhereUniqueInput;
  update: StudentUpdateWithoutSchoolDataInput;
  create: StudentCreateWithoutSchoolInput;
}

export interface SchoolUpsertNestedInput {
  update: SchoolUpdateDataInput;
  create: SchoolCreateInput;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface ClassroomUpsertWithWhereUniqueWithoutSchoolInput {
  where: ClassroomWhereUniqueInput;
  update: ClassroomUpdateWithoutSchoolDataInput;
  create: ClassroomCreateWithoutSchoolInput;
}

export interface SchoolUpsertWithoutClassLevelsInput {
  update: SchoolUpdateWithoutClassLevelsDataInput;
  create: SchoolCreateWithoutClassLevelsInput;
}

export interface ClassLevelUpdateManyMutationInput {
  levelName?: Maybe<String>;
  description?: Maybe<String>;
}

export interface ClassSubjectUpdateInput {
  subject?: Maybe<SubjectUpdateOneRequiredInput>;
  assignee?: Maybe<UserUpdateOneInput>;
  class?: Maybe<ClassroomUpdateOneRequiredWithoutSubjectsInput>;
}

export interface ClassroomCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  level: ClassLevelCreateOneWithoutClassRoomsInput;
  school?: Maybe<SchoolCreateOneWithoutClassesInput>;
  capacity: String;
  classTeacher?: Maybe<UserCreateOneInput>;
  students?: Maybe<StudentCreateManyWithoutClassInput>;
  subjects?: Maybe<ClassSubjectCreateManyWithoutClassInput>;
}

export interface ClassroomUpdateInput {
  name?: Maybe<String>;
  level?: Maybe<ClassLevelUpdateOneRequiredWithoutClassRoomsInput>;
  school?: Maybe<SchoolUpdateOneWithoutClassesInput>;
  capacity?: Maybe<String>;
  classTeacher?: Maybe<UserUpdateOneInput>;
  students?: Maybe<StudentUpdateManyWithoutClassInput>;
  subjects?: Maybe<ClassSubjectUpdateManyWithoutClassInput>;
}

export interface ClassroomUpdateManyMutationInput {
  name?: Maybe<String>;
  capacity?: Maybe<String>;
}

export interface CountryUpdateInput {
  name?: Maybe<String>;
}

export interface CountryUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface RegionUpdateInput {
  name?: Maybe<String>;
  country?: Maybe<CountryUpdateOneInput>;
}

export interface RegionUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface SchoolUpdateInput {
  name?: Maybe<String>;
  region?: Maybe<RegionUpdateOneInput>;
  address?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  schoolCode?: Maybe<String>;
  classes?: Maybe<ClassroomUpdateManyWithoutSchoolInput>;
  subjects?: Maybe<SubjectUpdateManyWithoutSchoolInput>;
  imageUrl?: Maybe<String>;
  level?: Maybe<Level>;
  students?: Maybe<StudentUpdateManyWithoutSchoolInput>;
  classLevels?: Maybe<ClassLevelUpdateManyWithoutSchoolInput>;
}

export interface SchoolUpdateManyMutationInput {
  name?: Maybe<String>;
  address?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  schoolCode?: Maybe<String>;
  imageUrl?: Maybe<String>;
  level?: Maybe<Level>;
}

export interface StudentCreateInput {
  id?: Maybe<ID_Input>;
  firstName: String;
  middleName?: Maybe<String>;
  lastName: String;
  admNo: String;
  domitory?: Maybe<String>;
  class?: Maybe<ClassroomCreateOneWithoutStudentsInput>;
  feeBalance?: Maybe<String>;
  subjects?: Maybe<ClassSubjectCreateManyInput>;
  gender?: Maybe<Gender>;
  school: SchoolCreateOneWithoutStudentsInput;
  prefect?: Maybe<Prefect>;
}

export interface StudentUpdateInput {
  firstName?: Maybe<String>;
  middleName?: Maybe<String>;
  lastName?: Maybe<String>;
  admNo?: Maybe<String>;
  domitory?: Maybe<String>;
  class?: Maybe<ClassroomUpdateOneWithoutStudentsInput>;
  feeBalance?: Maybe<String>;
  subjects?: Maybe<ClassSubjectUpdateManyInput>;
  gender?: Maybe<Gender>;
  school?: Maybe<SchoolUpdateOneRequiredWithoutStudentsInput>;
  prefect?: Maybe<Prefect>;
}

export interface StudentUpdateManyMutationInput {
  firstName?: Maybe<String>;
  middleName?: Maybe<String>;
  lastName?: Maybe<String>;
  admNo?: Maybe<String>;
  domitory?: Maybe<String>;
  feeBalance?: Maybe<String>;
  gender?: Maybe<Gender>;
  prefect?: Maybe<Prefect>;
}

export interface SubjectUpdateInput {
  name?: Maybe<String>;
  school?: Maybe<SchoolUpdateOneRequiredWithoutSubjectsInput>;
}

export interface SubjectUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface UserUpdateInput {
  firstName?: Maybe<String>;
  middleName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  school?: Maybe<SchoolUpdateOneInput>;
  phone?: Maybe<String>;
  password?: Maybe<String>;
  gender?: Maybe<Gender>;
  role?: Maybe<Role>;
}

export interface UserUpdateManyMutationInput {
  firstName?: Maybe<String>;
  middleName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  password?: Maybe<String>;
  gender?: Maybe<Gender>;
  role?: Maybe<Role>;
}

export interface ClassLevelSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ClassLevelWhereInput>;
  AND?: Maybe<
    ClassLevelSubscriptionWhereInput[] | ClassLevelSubscriptionWhereInput
  >;
  OR?: Maybe<
    ClassLevelSubscriptionWhereInput[] | ClassLevelSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ClassLevelSubscriptionWhereInput[] | ClassLevelSubscriptionWhereInput
  >;
}

export interface ClassSubjectSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ClassSubjectWhereInput>;
  AND?: Maybe<
    ClassSubjectSubscriptionWhereInput[] | ClassSubjectSubscriptionWhereInput
  >;
  OR?: Maybe<
    ClassSubjectSubscriptionWhereInput[] | ClassSubjectSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ClassSubjectSubscriptionWhereInput[] | ClassSubjectSubscriptionWhereInput
  >;
}

export interface ClassroomSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ClassroomWhereInput>;
  AND?: Maybe<
    ClassroomSubscriptionWhereInput[] | ClassroomSubscriptionWhereInput
  >;
  OR?: Maybe<
    ClassroomSubscriptionWhereInput[] | ClassroomSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ClassroomSubscriptionWhereInput[] | ClassroomSubscriptionWhereInput
  >;
}

export interface CountrySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CountryWhereInput>;
  AND?: Maybe<CountrySubscriptionWhereInput[] | CountrySubscriptionWhereInput>;
  OR?: Maybe<CountrySubscriptionWhereInput[] | CountrySubscriptionWhereInput>;
  NOT?: Maybe<CountrySubscriptionWhereInput[] | CountrySubscriptionWhereInput>;
}

export interface RegionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RegionWhereInput>;
  AND?: Maybe<RegionSubscriptionWhereInput[] | RegionSubscriptionWhereInput>;
  OR?: Maybe<RegionSubscriptionWhereInput[] | RegionSubscriptionWhereInput>;
  NOT?: Maybe<RegionSubscriptionWhereInput[] | RegionSubscriptionWhereInput>;
}

export interface SchoolSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SchoolWhereInput>;
  AND?: Maybe<SchoolSubscriptionWhereInput[] | SchoolSubscriptionWhereInput>;
  OR?: Maybe<SchoolSubscriptionWhereInput[] | SchoolSubscriptionWhereInput>;
  NOT?: Maybe<SchoolSubscriptionWhereInput[] | SchoolSubscriptionWhereInput>;
}

export interface StudentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<StudentWhereInput>;
  AND?: Maybe<StudentSubscriptionWhereInput[] | StudentSubscriptionWhereInput>;
  OR?: Maybe<StudentSubscriptionWhereInput[] | StudentSubscriptionWhereInput>;
  NOT?: Maybe<StudentSubscriptionWhereInput[] | StudentSubscriptionWhereInput>;
}

export interface SubjectSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SubjectWhereInput>;
  AND?: Maybe<SubjectSubscriptionWhereInput[] | SubjectSubscriptionWhereInput>;
  OR?: Maybe<SubjectSubscriptionWhereInput[] | SubjectSubscriptionWhereInput>;
  NOT?: Maybe<SubjectSubscriptionWhereInput[] | SubjectSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface ClassLevel {
  id: ID_Output;
  levelName: String;
  description?: String;
}

export interface ClassLevelPromise extends Promise<ClassLevel>, Fragmentable {
  id: () => Promise<ID_Output>;
  levelName: () => Promise<String>;
  description: () => Promise<String>;
  school: <T = SchoolPromise>() => T;
  classRooms: <T = FragmentableArray<Classroom>>(args?: {
    where?: ClassroomWhereInput;
    orderBy?: ClassroomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ClassLevelSubscription
  extends Promise<AsyncIterator<ClassLevel>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  levelName: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  school: <T = SchoolSubscription>() => T;
  classRooms: <T = Promise<AsyncIterator<ClassroomSubscription>>>(args?: {
    where?: ClassroomWhereInput;
    orderBy?: ClassroomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ClassLevelNullablePromise
  extends Promise<ClassLevel | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  levelName: () => Promise<String>;
  description: () => Promise<String>;
  school: <T = SchoolPromise>() => T;
  classRooms: <T = FragmentableArray<Classroom>>(args?: {
    where?: ClassroomWhereInput;
    orderBy?: ClassroomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface School {
  id: ID_Output;
  name: String;
  address?: String;
  email?: String;
  phone: String;
  schoolCode: String;
  imageUrl?: String;
  level?: Level;
  createdAt?: DateTimeOutput;
  updatedAt?: DateTimeOutput;
}

export interface SchoolPromise extends Promise<School>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  region: <T = RegionPromise>() => T;
  address: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  schoolCode: () => Promise<String>;
  classes: <T = FragmentableArray<Classroom>>(args?: {
    where?: ClassroomWhereInput;
    orderBy?: ClassroomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  subjects: <T = FragmentableArray<Subject>>(args?: {
    where?: SubjectWhereInput;
    orderBy?: SubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  imageUrl: () => Promise<String>;
  level: () => Promise<Level>;
  students: <T = FragmentableArray<Student>>(args?: {
    where?: StudentWhereInput;
    orderBy?: StudentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  classLevels: <T = FragmentableArray<ClassLevel>>(args?: {
    where?: ClassLevelWhereInput;
    orderBy?: ClassLevelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SchoolSubscription
  extends Promise<AsyncIterator<School>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  region: <T = RegionSubscription>() => T;
  address: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  schoolCode: () => Promise<AsyncIterator<String>>;
  classes: <T = Promise<AsyncIterator<ClassroomSubscription>>>(args?: {
    where?: ClassroomWhereInput;
    orderBy?: ClassroomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  subjects: <T = Promise<AsyncIterator<SubjectSubscription>>>(args?: {
    where?: SubjectWhereInput;
    orderBy?: SubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  imageUrl: () => Promise<AsyncIterator<String>>;
  level: () => Promise<AsyncIterator<Level>>;
  students: <T = Promise<AsyncIterator<StudentSubscription>>>(args?: {
    where?: StudentWhereInput;
    orderBy?: StudentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  classLevels: <T = Promise<AsyncIterator<ClassLevelSubscription>>>(args?: {
    where?: ClassLevelWhereInput;
    orderBy?: ClassLevelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SchoolNullablePromise
  extends Promise<School | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  region: <T = RegionPromise>() => T;
  address: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  schoolCode: () => Promise<String>;
  classes: <T = FragmentableArray<Classroom>>(args?: {
    where?: ClassroomWhereInput;
    orderBy?: ClassroomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  subjects: <T = FragmentableArray<Subject>>(args?: {
    where?: SubjectWhereInput;
    orderBy?: SubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  imageUrl: () => Promise<String>;
  level: () => Promise<Level>;
  students: <T = FragmentableArray<Student>>(args?: {
    where?: StudentWhereInput;
    orderBy?: StudentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  classLevels: <T = FragmentableArray<ClassLevel>>(args?: {
    where?: ClassLevelWhereInput;
    orderBy?: ClassLevelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Region {
  id: ID_Output;
  name: String;
  createdAt?: DateTimeOutput;
  updatedAt?: DateTimeOutput;
}

export interface RegionPromise extends Promise<Region>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  country: <T = CountryPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface RegionSubscription
  extends Promise<AsyncIterator<Region>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  country: <T = CountrySubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RegionNullablePromise
  extends Promise<Region | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  country: <T = CountryPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Country {
  id: ID_Output;
  name: String;
  createdAt?: DateTimeOutput;
  updatedAt?: DateTimeOutput;
}

export interface CountryPromise extends Promise<Country>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CountrySubscription
  extends Promise<AsyncIterator<Country>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CountryNullablePromise
  extends Promise<Country | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Classroom {
  id: ID_Output;
  name: String;
  capacity: String;
  createdAt?: DateTimeOutput;
  updatedAt?: DateTimeOutput;
}

export interface ClassroomPromise extends Promise<Classroom>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  level: <T = ClassLevelPromise>() => T;
  school: <T = SchoolPromise>() => T;
  capacity: () => Promise<String>;
  classTeacher: <T = UserPromise>() => T;
  students: <T = FragmentableArray<Student>>(args?: {
    where?: StudentWhereInput;
    orderBy?: StudentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  subjects: <T = FragmentableArray<ClassSubject>>(args?: {
    where?: ClassSubjectWhereInput;
    orderBy?: ClassSubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ClassroomSubscription
  extends Promise<AsyncIterator<Classroom>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  level: <T = ClassLevelSubscription>() => T;
  school: <T = SchoolSubscription>() => T;
  capacity: () => Promise<AsyncIterator<String>>;
  classTeacher: <T = UserSubscription>() => T;
  students: <T = Promise<AsyncIterator<StudentSubscription>>>(args?: {
    where?: StudentWhereInput;
    orderBy?: StudentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  subjects: <T = Promise<AsyncIterator<ClassSubjectSubscription>>>(args?: {
    where?: ClassSubjectWhereInput;
    orderBy?: ClassSubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ClassroomNullablePromise
  extends Promise<Classroom | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  level: <T = ClassLevelPromise>() => T;
  school: <T = SchoolPromise>() => T;
  capacity: () => Promise<String>;
  classTeacher: <T = UserPromise>() => T;
  students: <T = FragmentableArray<Student>>(args?: {
    where?: StudentWhereInput;
    orderBy?: StudentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  subjects: <T = FragmentableArray<ClassSubject>>(args?: {
    where?: ClassSubjectWhereInput;
    orderBy?: ClassSubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface User {
  id: ID_Output;
  firstName: String;
  middleName?: String;
  lastName: String;
  email?: String;
  phone?: String;
  password: String;
  gender?: Gender;
  role: Role;
  createdAt?: DateTimeOutput;
  updatedAt?: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  middleName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  school: <T = SchoolPromise>() => T;
  phone: () => Promise<String>;
  password: () => Promise<String>;
  gender: () => Promise<Gender>;
  role: () => Promise<Role>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  middleName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  school: <T = SchoolSubscription>() => T;
  phone: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<Gender>>;
  role: () => Promise<AsyncIterator<Role>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  middleName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  school: <T = SchoolPromise>() => T;
  phone: () => Promise<String>;
  password: () => Promise<String>;
  gender: () => Promise<Gender>;
  role: () => Promise<Role>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Student {
  id: ID_Output;
  firstName: String;
  middleName?: String;
  lastName: String;
  admNo: String;
  domitory?: String;
  feeBalance?: String;
  gender?: Gender;
  prefect?: Prefect;
  createdAt?: DateTimeOutput;
  updatedAt?: DateTimeOutput;
}

export interface StudentPromise extends Promise<Student>, Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  middleName: () => Promise<String>;
  lastName: () => Promise<String>;
  admNo: () => Promise<String>;
  domitory: () => Promise<String>;
  class: <T = ClassroomPromise>() => T;
  feeBalance: () => Promise<String>;
  subjects: <T = FragmentableArray<ClassSubject>>(args?: {
    where?: ClassSubjectWhereInput;
    orderBy?: ClassSubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  gender: () => Promise<Gender>;
  school: <T = SchoolPromise>() => T;
  prefect: () => Promise<Prefect>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface StudentSubscription
  extends Promise<AsyncIterator<Student>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  middleName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  admNo: () => Promise<AsyncIterator<String>>;
  domitory: () => Promise<AsyncIterator<String>>;
  class: <T = ClassroomSubscription>() => T;
  feeBalance: () => Promise<AsyncIterator<String>>;
  subjects: <T = Promise<AsyncIterator<ClassSubjectSubscription>>>(args?: {
    where?: ClassSubjectWhereInput;
    orderBy?: ClassSubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  gender: () => Promise<AsyncIterator<Gender>>;
  school: <T = SchoolSubscription>() => T;
  prefect: () => Promise<AsyncIterator<Prefect>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface StudentNullablePromise
  extends Promise<Student | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  middleName: () => Promise<String>;
  lastName: () => Promise<String>;
  admNo: () => Promise<String>;
  domitory: () => Promise<String>;
  class: <T = ClassroomPromise>() => T;
  feeBalance: () => Promise<String>;
  subjects: <T = FragmentableArray<ClassSubject>>(args?: {
    where?: ClassSubjectWhereInput;
    orderBy?: ClassSubjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  gender: () => Promise<Gender>;
  school: <T = SchoolPromise>() => T;
  prefect: () => Promise<Prefect>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ClassSubject {
  id: ID_Output;
}

export interface ClassSubjectPromise
  extends Promise<ClassSubject>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  subject: <T = SubjectPromise>() => T;
  assignee: <T = UserPromise>() => T;
  class: <T = ClassroomPromise>() => T;
}

export interface ClassSubjectSubscription
  extends Promise<AsyncIterator<ClassSubject>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  subject: <T = SubjectSubscription>() => T;
  assignee: <T = UserSubscription>() => T;
  class: <T = ClassroomSubscription>() => T;
}

export interface ClassSubjectNullablePromise
  extends Promise<ClassSubject | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  subject: <T = SubjectPromise>() => T;
  assignee: <T = UserPromise>() => T;
  class: <T = ClassroomPromise>() => T;
}

export interface Subject {
  id: ID_Output;
  name: String;
  createdAt?: DateTimeOutput;
  updatedAt?: DateTimeOutput;
}

export interface SubjectPromise extends Promise<Subject>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  school: <T = SchoolPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SubjectSubscription
  extends Promise<AsyncIterator<Subject>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  school: <T = SchoolSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SubjectNullablePromise
  extends Promise<Subject | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  school: <T = SchoolPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ClassLevelConnection {
  pageInfo: PageInfo;
  edges: ClassLevelEdge[];
}

export interface ClassLevelConnectionPromise
  extends Promise<ClassLevelConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ClassLevelEdge>>() => T;
  aggregate: <T = AggregateClassLevelPromise>() => T;
}

export interface ClassLevelConnectionSubscription
  extends Promise<AsyncIterator<ClassLevelConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ClassLevelEdgeSubscription>>>() => T;
  aggregate: <T = AggregateClassLevelSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ClassLevelEdge {
  node: ClassLevel;
  cursor: String;
}

export interface ClassLevelEdgePromise
  extends Promise<ClassLevelEdge>,
    Fragmentable {
  node: <T = ClassLevelPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ClassLevelEdgeSubscription
  extends Promise<AsyncIterator<ClassLevelEdge>>,
    Fragmentable {
  node: <T = ClassLevelSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateClassLevel {
  count: Int;
}

export interface AggregateClassLevelPromise
  extends Promise<AggregateClassLevel>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateClassLevelSubscription
  extends Promise<AsyncIterator<AggregateClassLevel>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ClassSubjectConnection {
  pageInfo: PageInfo;
  edges: ClassSubjectEdge[];
}

export interface ClassSubjectConnectionPromise
  extends Promise<ClassSubjectConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ClassSubjectEdge>>() => T;
  aggregate: <T = AggregateClassSubjectPromise>() => T;
}

export interface ClassSubjectConnectionSubscription
  extends Promise<AsyncIterator<ClassSubjectConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ClassSubjectEdgeSubscription>>>() => T;
  aggregate: <T = AggregateClassSubjectSubscription>() => T;
}

export interface ClassSubjectEdge {
  node: ClassSubject;
  cursor: String;
}

export interface ClassSubjectEdgePromise
  extends Promise<ClassSubjectEdge>,
    Fragmentable {
  node: <T = ClassSubjectPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ClassSubjectEdgeSubscription
  extends Promise<AsyncIterator<ClassSubjectEdge>>,
    Fragmentable {
  node: <T = ClassSubjectSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateClassSubject {
  count: Int;
}

export interface AggregateClassSubjectPromise
  extends Promise<AggregateClassSubject>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateClassSubjectSubscription
  extends Promise<AsyncIterator<AggregateClassSubject>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ClassroomConnection {
  pageInfo: PageInfo;
  edges: ClassroomEdge[];
}

export interface ClassroomConnectionPromise
  extends Promise<ClassroomConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ClassroomEdge>>() => T;
  aggregate: <T = AggregateClassroomPromise>() => T;
}

export interface ClassroomConnectionSubscription
  extends Promise<AsyncIterator<ClassroomConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ClassroomEdgeSubscription>>>() => T;
  aggregate: <T = AggregateClassroomSubscription>() => T;
}

export interface ClassroomEdge {
  node: Classroom;
  cursor: String;
}

export interface ClassroomEdgePromise
  extends Promise<ClassroomEdge>,
    Fragmentable {
  node: <T = ClassroomPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ClassroomEdgeSubscription
  extends Promise<AsyncIterator<ClassroomEdge>>,
    Fragmentable {
  node: <T = ClassroomSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateClassroom {
  count: Int;
}

export interface AggregateClassroomPromise
  extends Promise<AggregateClassroom>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateClassroomSubscription
  extends Promise<AsyncIterator<AggregateClassroom>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CountryConnection {
  pageInfo: PageInfo;
  edges: CountryEdge[];
}

export interface CountryConnectionPromise
  extends Promise<CountryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CountryEdge>>() => T;
  aggregate: <T = AggregateCountryPromise>() => T;
}

export interface CountryConnectionSubscription
  extends Promise<AsyncIterator<CountryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CountryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCountrySubscription>() => T;
}

export interface CountryEdge {
  node: Country;
  cursor: String;
}

export interface CountryEdgePromise extends Promise<CountryEdge>, Fragmentable {
  node: <T = CountryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CountryEdgeSubscription
  extends Promise<AsyncIterator<CountryEdge>>,
    Fragmentable {
  node: <T = CountrySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCountry {
  count: Int;
}

export interface AggregateCountryPromise
  extends Promise<AggregateCountry>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCountrySubscription
  extends Promise<AsyncIterator<AggregateCountry>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RegionConnection {
  pageInfo: PageInfo;
  edges: RegionEdge[];
}

export interface RegionConnectionPromise
  extends Promise<RegionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RegionEdge>>() => T;
  aggregate: <T = AggregateRegionPromise>() => T;
}

export interface RegionConnectionSubscription
  extends Promise<AsyncIterator<RegionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RegionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRegionSubscription>() => T;
}

export interface RegionEdge {
  node: Region;
  cursor: String;
}

export interface RegionEdgePromise extends Promise<RegionEdge>, Fragmentable {
  node: <T = RegionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RegionEdgeSubscription
  extends Promise<AsyncIterator<RegionEdge>>,
    Fragmentable {
  node: <T = RegionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRegion {
  count: Int;
}

export interface AggregateRegionPromise
  extends Promise<AggregateRegion>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRegionSubscription
  extends Promise<AsyncIterator<AggregateRegion>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SchoolConnection {
  pageInfo: PageInfo;
  edges: SchoolEdge[];
}

export interface SchoolConnectionPromise
  extends Promise<SchoolConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SchoolEdge>>() => T;
  aggregate: <T = AggregateSchoolPromise>() => T;
}

export interface SchoolConnectionSubscription
  extends Promise<AsyncIterator<SchoolConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SchoolEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSchoolSubscription>() => T;
}

export interface SchoolEdge {
  node: School;
  cursor: String;
}

export interface SchoolEdgePromise extends Promise<SchoolEdge>, Fragmentable {
  node: <T = SchoolPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SchoolEdgeSubscription
  extends Promise<AsyncIterator<SchoolEdge>>,
    Fragmentable {
  node: <T = SchoolSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSchool {
  count: Int;
}

export interface AggregateSchoolPromise
  extends Promise<AggregateSchool>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSchoolSubscription
  extends Promise<AsyncIterator<AggregateSchool>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface StudentConnection {
  pageInfo: PageInfo;
  edges: StudentEdge[];
}

export interface StudentConnectionPromise
  extends Promise<StudentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StudentEdge>>() => T;
  aggregate: <T = AggregateStudentPromise>() => T;
}

export interface StudentConnectionSubscription
  extends Promise<AsyncIterator<StudentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StudentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStudentSubscription>() => T;
}

export interface StudentEdge {
  node: Student;
  cursor: String;
}

export interface StudentEdgePromise extends Promise<StudentEdge>, Fragmentable {
  node: <T = StudentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface StudentEdgeSubscription
  extends Promise<AsyncIterator<StudentEdge>>,
    Fragmentable {
  node: <T = StudentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateStudent {
  count: Int;
}

export interface AggregateStudentPromise
  extends Promise<AggregateStudent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStudentSubscription
  extends Promise<AsyncIterator<AggregateStudent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SubjectConnection {
  pageInfo: PageInfo;
  edges: SubjectEdge[];
}

export interface SubjectConnectionPromise
  extends Promise<SubjectConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SubjectEdge>>() => T;
  aggregate: <T = AggregateSubjectPromise>() => T;
}

export interface SubjectConnectionSubscription
  extends Promise<AsyncIterator<SubjectConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SubjectEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSubjectSubscription>() => T;
}

export interface SubjectEdge {
  node: Subject;
  cursor: String;
}

export interface SubjectEdgePromise extends Promise<SubjectEdge>, Fragmentable {
  node: <T = SubjectPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SubjectEdgeSubscription
  extends Promise<AsyncIterator<SubjectEdge>>,
    Fragmentable {
  node: <T = SubjectSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSubject {
  count: Int;
}

export interface AggregateSubjectPromise
  extends Promise<AggregateSubject>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSubjectSubscription
  extends Promise<AsyncIterator<AggregateSubject>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ClassLevelSubscriptionPayload {
  mutation: MutationType;
  node: ClassLevel;
  updatedFields: String[];
  previousValues: ClassLevelPreviousValues;
}

export interface ClassLevelSubscriptionPayloadPromise
  extends Promise<ClassLevelSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ClassLevelPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ClassLevelPreviousValuesPromise>() => T;
}

export interface ClassLevelSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ClassLevelSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ClassLevelSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ClassLevelPreviousValuesSubscription>() => T;
}

export interface ClassLevelPreviousValues {
  id: ID_Output;
  levelName: String;
  description?: String;
}

export interface ClassLevelPreviousValuesPromise
  extends Promise<ClassLevelPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  levelName: () => Promise<String>;
  description: () => Promise<String>;
}

export interface ClassLevelPreviousValuesSubscription
  extends Promise<AsyncIterator<ClassLevelPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  levelName: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface ClassSubjectSubscriptionPayload {
  mutation: MutationType;
  node: ClassSubject;
  updatedFields: String[];
  previousValues: ClassSubjectPreviousValues;
}

export interface ClassSubjectSubscriptionPayloadPromise
  extends Promise<ClassSubjectSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ClassSubjectPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ClassSubjectPreviousValuesPromise>() => T;
}

export interface ClassSubjectSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ClassSubjectSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ClassSubjectSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ClassSubjectPreviousValuesSubscription>() => T;
}

export interface ClassSubjectPreviousValues {
  id: ID_Output;
}

export interface ClassSubjectPreviousValuesPromise
  extends Promise<ClassSubjectPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface ClassSubjectPreviousValuesSubscription
  extends Promise<AsyncIterator<ClassSubjectPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface ClassroomSubscriptionPayload {
  mutation: MutationType;
  node: Classroom;
  updatedFields: String[];
  previousValues: ClassroomPreviousValues;
}

export interface ClassroomSubscriptionPayloadPromise
  extends Promise<ClassroomSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ClassroomPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ClassroomPreviousValuesPromise>() => T;
}

export interface ClassroomSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ClassroomSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ClassroomSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ClassroomPreviousValuesSubscription>() => T;
}

export interface ClassroomPreviousValues {
  id: ID_Output;
  name: String;
  capacity: String;
  createdAt?: DateTimeOutput;
  updatedAt?: DateTimeOutput;
}

export interface ClassroomPreviousValuesPromise
  extends Promise<ClassroomPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  capacity: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ClassroomPreviousValuesSubscription
  extends Promise<AsyncIterator<ClassroomPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  capacity: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CountrySubscriptionPayload {
  mutation: MutationType;
  node: Country;
  updatedFields: String[];
  previousValues: CountryPreviousValues;
}

export interface CountrySubscriptionPayloadPromise
  extends Promise<CountrySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CountryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CountryPreviousValuesPromise>() => T;
}

export interface CountrySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CountrySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CountrySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CountryPreviousValuesSubscription>() => T;
}

export interface CountryPreviousValues {
  id: ID_Output;
  name: String;
  createdAt?: DateTimeOutput;
  updatedAt?: DateTimeOutput;
}

export interface CountryPreviousValuesPromise
  extends Promise<CountryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CountryPreviousValuesSubscription
  extends Promise<AsyncIterator<CountryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RegionSubscriptionPayload {
  mutation: MutationType;
  node: Region;
  updatedFields: String[];
  previousValues: RegionPreviousValues;
}

export interface RegionSubscriptionPayloadPromise
  extends Promise<RegionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RegionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RegionPreviousValuesPromise>() => T;
}

export interface RegionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RegionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RegionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RegionPreviousValuesSubscription>() => T;
}

export interface RegionPreviousValues {
  id: ID_Output;
  name: String;
  createdAt?: DateTimeOutput;
  updatedAt?: DateTimeOutput;
}

export interface RegionPreviousValuesPromise
  extends Promise<RegionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface RegionPreviousValuesSubscription
  extends Promise<AsyncIterator<RegionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SchoolSubscriptionPayload {
  mutation: MutationType;
  node: School;
  updatedFields: String[];
  previousValues: SchoolPreviousValues;
}

export interface SchoolSubscriptionPayloadPromise
  extends Promise<SchoolSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SchoolPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SchoolPreviousValuesPromise>() => T;
}

export interface SchoolSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SchoolSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SchoolSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SchoolPreviousValuesSubscription>() => T;
}

export interface SchoolPreviousValues {
  id: ID_Output;
  name: String;
  address?: String;
  email?: String;
  phone: String;
  schoolCode: String;
  imageUrl?: String;
  level?: Level;
  createdAt?: DateTimeOutput;
  updatedAt?: DateTimeOutput;
}

export interface SchoolPreviousValuesPromise
  extends Promise<SchoolPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  address: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  schoolCode: () => Promise<String>;
  imageUrl: () => Promise<String>;
  level: () => Promise<Level>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SchoolPreviousValuesSubscription
  extends Promise<AsyncIterator<SchoolPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  schoolCode: () => Promise<AsyncIterator<String>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
  level: () => Promise<AsyncIterator<Level>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface StudentSubscriptionPayload {
  mutation: MutationType;
  node: Student;
  updatedFields: String[];
  previousValues: StudentPreviousValues;
}

export interface StudentSubscriptionPayloadPromise
  extends Promise<StudentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StudentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StudentPreviousValuesPromise>() => T;
}

export interface StudentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StudentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StudentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StudentPreviousValuesSubscription>() => T;
}

export interface StudentPreviousValues {
  id: ID_Output;
  firstName: String;
  middleName?: String;
  lastName: String;
  admNo: String;
  domitory?: String;
  feeBalance?: String;
  gender?: Gender;
  prefect?: Prefect;
  createdAt?: DateTimeOutput;
  updatedAt?: DateTimeOutput;
}

export interface StudentPreviousValuesPromise
  extends Promise<StudentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  middleName: () => Promise<String>;
  lastName: () => Promise<String>;
  admNo: () => Promise<String>;
  domitory: () => Promise<String>;
  feeBalance: () => Promise<String>;
  gender: () => Promise<Gender>;
  prefect: () => Promise<Prefect>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface StudentPreviousValuesSubscription
  extends Promise<AsyncIterator<StudentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  middleName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  admNo: () => Promise<AsyncIterator<String>>;
  domitory: () => Promise<AsyncIterator<String>>;
  feeBalance: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<Gender>>;
  prefect: () => Promise<AsyncIterator<Prefect>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SubjectSubscriptionPayload {
  mutation: MutationType;
  node: Subject;
  updatedFields: String[];
  previousValues: SubjectPreviousValues;
}

export interface SubjectSubscriptionPayloadPromise
  extends Promise<SubjectSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SubjectPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SubjectPreviousValuesPromise>() => T;
}

export interface SubjectSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SubjectSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SubjectSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SubjectPreviousValuesSubscription>() => T;
}

export interface SubjectPreviousValues {
  id: ID_Output;
  name: String;
  createdAt?: DateTimeOutput;
  updatedAt?: DateTimeOutput;
}

export interface SubjectPreviousValuesPromise
  extends Promise<SubjectPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SubjectPreviousValuesSubscription
  extends Promise<AsyncIterator<SubjectPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  firstName: String;
  middleName?: String;
  lastName: String;
  email?: String;
  phone?: String;
  password: String;
  gender?: Gender;
  role: Role;
  createdAt?: DateTimeOutput;
  updatedAt?: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  middleName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  password: () => Promise<String>;
  gender: () => Promise<Gender>;
  role: () => Promise<Role>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  middleName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<Gender>>;
  role: () => Promise<AsyncIterator<Role>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "School",
    embedded: false
  },
  {
    name: "Country",
    embedded: false
  },
  {
    name: "Region",
    embedded: false
  },
  {
    name: "Classroom",
    embedded: false
  },
  {
    name: "Student",
    embedded: false
  },
  {
    name: "Subject",
    embedded: false
  },
  {
    name: "ClassSubject",
    embedded: false
  },
  {
    name: "ClassLevel",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  },
  {
    name: "Level",
    embedded: false
  },
  {
    name: "Prefect",
    embedded: false
  },
  {
    name: "Gender",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
